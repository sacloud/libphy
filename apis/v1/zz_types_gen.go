// Copyright 2021 The phy-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	Account_api_keyScopes = "account_api_key.Scopes"
)

// Defines values for AssignNetworkParameterInternetType.
const (
	AssignNetworkParameterInternetTypeCommonSubnet AssignNetworkParameterInternetType = "common_subnet"

	AssignNetworkParameterInternetTypeDedicatedSubnet AssignNetworkParameterInternetType = "dedicated_subnet"
)

// Defines values for AssignNetworkParameterMode.
const (
	AssignNetworkParameterModeAccess AssignNetworkParameterMode = "access"

	AssignNetworkParameterModeTrunk AssignNetworkParameterMode = "trunk"
)

// Defines values for BondingType.
const (
	BondingTypeLacp BondingType = "lacp"

	BondingTypeSingle BondingType = "single"

	BondingTypeStatic BondingType = "static"
)

// Defines values for CachedPowerStatusStatus.
const (
	CachedPowerStatusStatusOff CachedPowerStatusStatus = "off"

	CachedPowerStatusStatusOn CachedPowerStatusStatus = "on"
)

// Defines values for DedicatedSubnetConfigStatus.
const (
	DedicatedSubnetConfigStatusAdministrativeLock DedicatedSubnetConfigStatus = "administrative_lock"

	DedicatedSubnetConfigStatusConfigureFw DedicatedSubnetConfigStatus = "configure_fw"

	DedicatedSubnetConfigStatusConfigureLb DedicatedSubnetConfigStatus = "configure_lb"

	DedicatedSubnetConfigStatusEnableIpv6 DedicatedSubnetConfigStatus = "enable_ipv6"

	DedicatedSubnetConfigStatusOperational DedicatedSubnetConfigStatus = "operational"
)

// Defines values for InterfacePortMode.
const (
	InterfacePortModeAccess InterfacePortMode = "access"

	InterfacePortModeTrunk InterfacePortMode = "trunk"
)

// Defines values for InternetSubnetType.
const (
	InternetSubnetTypeCommonSubnet InternetSubnetType = "common_subnet"

	InternetSubnetTypeDedicatedSubnet InternetSubnetType = "dedicated_subnet"
)

// Defines values for IpamType.
const (
	IpamTypeGateway IpamType = "gateway"

	IpamTypeGatewayReal IpamType = "gateway_real"

	IpamTypeLoadBalancer IpamType = "load_balancer"

	IpamTypeServer IpamType = "server"

	IpamTypeVoid IpamType = "void"
)

// Defines values for Ipv6SpecialUseAddressesType.
const (
	Ipv6SpecialUseAddressesTypeGateway Ipv6SpecialUseAddressesType = "gateway"

	Ipv6SpecialUseAddressesTypeGatewayReal Ipv6SpecialUseAddressesType = "gateway_real"
)

// Defines values for PortChannelLinkSpeedType.
const (
	PortChannelLinkSpeedTypeN10gbe PortChannelLinkSpeedType = "10gbe"

	PortChannelLinkSpeedTypeN1gbe PortChannelLinkSpeedType = "1gbe"
)

// Defines values for ProblemDetails400Title.
const (
	ProblemDetails400TitleInvalid ProblemDetails400Title = "invalid"

	ProblemDetails400TitleParseError ProblemDetails400Title = "parse_error"
)

// Defines values for ProblemDetails401ErrorCode.
const (
	ProblemDetails401ErrorCodeUnauthorized ProblemDetails401ErrorCode = "unauthorized"
)

// Defines values for ProblemDetails404Title.
const (
	ProblemDetails404TitleNotFound ProblemDetails404Title = "not_found"
)

// Defines values for ProblemDetails409Title.
const (
	ProblemDetails409TitleConflict ProblemDetails409Title = "conflict"
)

// Defines values for ProblemDetails429Title.
const (
	ProblemDetails429TitleThrottled ProblemDetails429Title = "throttled"
)

// Defines values for ProblemDetails503Title.
const (
	ProblemDetails503TitleTemporaryUnavailable ProblemDetails503Title = "temporary_unavailable"
)

// Defines values for RaidLogicalVolumeStatus.
const (
	RaidLogicalVolumeStatusDegraded RaidLogicalVolumeStatus = "degraded"

	RaidLogicalVolumeStatusFailed RaidLogicalVolumeStatus = "failed"

	RaidLogicalVolumeStatusOk RaidLogicalVolumeStatus = "ok"

	RaidLogicalVolumeStatusRebuilding RaidLogicalVolumeStatus = "rebuilding"
)

// Defines values for RaidPhysicalDeviceStatus.
const (
	RaidPhysicalDeviceStatusFailed RaidPhysicalDeviceStatus = "failed"

	RaidPhysicalDeviceStatusOk RaidPhysicalDeviceStatus = "ok"
)

// Defines values for RaidStatusOverallStatus.
const (
	RaidStatusOverallStatusDegraded RaidStatusOverallStatus = "degraded"

	RaidStatusOverallStatusFailed RaidStatusOverallStatus = "failed"

	RaidStatusOverallStatusOk RaidStatusOverallStatus = "ok"

	RaidStatusOverallStatusRebuilding RaidStatusOverallStatus = "rebuilding"
)

// Defines values for ServerLockStatus.
const (
	ServerLockStatusAdministrativeLock ServerLockStatus = "administrative_lock"

	ServerLockStatusConfigureRaid ServerLockStatus = "configure_raid"

	ServerLockStatusOsInstall ServerLockStatus = "os_install"
)

// Defines values for ServerIpv4GlobalType.
const (
	ServerIpv4GlobalTypeCommonIpAddress ServerIpv4GlobalType = "common_ip_address"

	ServerIpv4GlobalTypeDedicatedIpAddress ServerIpv4GlobalType = "dedicated_ip_address"
)

// Defines values for ServerPowerOperations.
const (
	ServerPowerOperationsOff ServerPowerOperations = "off"

	ServerPowerOperationsOn ServerPowerOperations = "on"

	ServerPowerOperationsReset ServerPowerOperations = "reset"

	ServerPowerOperationsSoft ServerPowerOperations = "soft"
)

// Defines values for ServerPowerStatusStatus.
const (
	ServerPowerStatusStatusOff ServerPowerStatusStatus = "off"

	ServerPowerStatusStatusOn ServerPowerStatusStatus = "on"
)

// Defines values for ServiceOptionPlansOptionClass.
const (
	ServiceOptionPlansOptionClassAdditionalNvmeStorage1 ServiceOptionPlansOptionClass = "additional_nvme_storage1"

	ServiceOptionPlansOptionClassAdditionalNvmeStorage2 ServiceOptionPlansOptionClass = "additional_nvme_storage2"

	ServiceOptionPlansOptionClassAdditionalStorage1 ServiceOptionPlansOptionClass = "additional_storage1"

	ServiceOptionPlansOptionClassAdditionalStorage2 ServiceOptionPlansOptionClass = "additional_storage2"

	ServiceOptionPlansOptionClassAdditionalStorage3 ServiceOptionPlansOptionClass = "additional_storage3"

	ServiceOptionPlansOptionClassGlobalBandwidth ServiceOptionPlansOptionClass = "global_bandwidth"

	ServiceOptionPlansOptionClassLocalBandwidth ServiceOptionPlansOptionClass = "local_bandwidth"

	ServiceOptionPlansOptionClassOs ServiceOptionPlansOptionClass = "os"

	ServiceOptionPlansOptionClassUpgradeMemory ServiceOptionPlansOptionClass = "upgrade_memory"

	ServiceOptionPlansOptionClassUpgradeStorage ServiceOptionPlansOptionClass = "upgrade_storage"
)

// Defines values for ServiceProductCategory.
const (
	ServiceProductCategoryDedicatedSubnet ServiceProductCategory = "dedicated_subnet"

	ServiceProductCategoryFirewall ServiceProductCategory = "firewall"

	ServiceProductCategoryLoadBalancer ServiceProductCategory = "load_balancer"

	ServiceProductCategoryPrivateNetwork ServiceProductCategory = "private_network"

	ServiceProductCategoryServer ServiceProductCategory = "server"
)

// Defines values for StorageBusType.
const (
	StorageBusTypeNvme StorageBusType = "nvme"

	StorageBusTypeSas StorageBusType = "sas"

	StorageBusTypeSata StorageBusType = "sata"
)

// Defines values for StorageMediaType.
const (
	StorageMediaTypeFlashMemory StorageMediaType = "flash_memory"

	StorageMediaTypeHdd StorageMediaType = "hdd"

	StorageMediaTypeSsd StorageMediaType = "ssd"
)

// Defines values for HeaderRequestedWith.
const (
	XMLHttpRequest HeaderRequestedWith = "XMLHttpRequest"
)

// ポートの接続ネットワーク指定
//
// `mode=access`の場合は
//
// * 共用グローバルネットワーク
// * 専用グローバルネットワーク
// * ローカルネットワーク
//
// のいずれか1つのみ接続可能で、
// 複数のネットワークが指定されている場合はエラーとなる
type AssignNetworkParameter struct {
	// 専用グローバルネットワークのサービスコード指定
	// `global_network_type`が`dedicated_subnet`の場合に必須
	DedicatedSubnetId *string `json:"dedicated_subnet_id"`

	// * `null` - インターネット接続なし
	// * `common_subnet` - 共用グローバルネットワーク利用
	// * `dedicated_subnet` - 専用グローバルネットワーク利用
	InternetType *AssignNetworkParameterInternetType `json:"internet_type"`

	// ポートモード
	//
	// * `access` - アクセスポート
	// * `trunk` - トランクポート
	Mode AssignNetworkParameterMode `json:"mode"`

	// 接続先ローカルネットワークの配列
	PrivateNetworkIds *[]string `json:"private_network_ids"`
}

// * `null` - インターネット接続なし
// * `common_subnet` - 共用グローバルネットワーク利用
// * `dedicated_subnet` - 専用グローバルネットワーク利用
type AssignNetworkParameterInternetType string

// ポートモード
//
// * `access` - アクセスポート
// * `trunk` - トランクポート
type AssignNetworkParameterMode string

// 専用グローバルネットワーク情報(共用グローバルネットワーク割り当て時は`null`)
type AttachedDedicatedSubnet struct {
	// 専用グローバルネットワークのサービスコード
	DedicatedSubnetId string `json:"dedicated_subnet_id"`

	// 専用グローバルネットワークに設定した名称
	Nickname string `json:"nickname"`
}

// 割り当て済みファイアウォール(利用していない場合は`null`)
type AttachedFirewall struct {
	// ファイアウォールのサービスコード
	FirewallId string `json:"firewall_id"`

	// ファイアウォールの名称
	Nickname string `json:"nickname"`
}

// 割り当て済みロードバランサー(利用していない場合は`null`)
type AttachedLoadBalancer struct {
	// ロードバランサーのサービスコード
	LoadBalancerId *string `json:"load_balancer_id"`

	// ロードバランサーの名称
	Nickname string `json:"nickname"`
}

// ローカルネットワーク情報
type AttachedPrivateNetwork struct {
	// ローカルネットワークに設定した名称
	Nickname string `json:"nickname"`

	// ローカルネットワークID
	PrivateNetworkId string `json:"private_network_id"`
}

// ボンディング方式
//
// * `lacp` - LACP
// * `static` - static link aggregation
// * `single` - ボンディングなし(単体構成)
type BondingType string

// キャッシュされた電源状態(未キャッシュならば`null`)
type CachedPowerStatus struct {
	// 電源状態
	Status CachedPowerStatusStatus `json:"status"`

	// 電源状態キャッシュの保存時刻
	Stored time.Time `json:"stored"`
}

// 電源状態
type CachedPowerStatusStatus string

// ConfigureBondingParameter defines model for configure_bonding_parameter.
type ConfigureBondingParameter struct {
	// ボンディング方式
	//
	// * `lacp` - LACP
	// * `static` - static link aggregation
	// * `single` - ボンディングなし(単体構成)
	BondingType BondingType `json:"bonding_type"`

	// 作成するポート名称の指定
	//
	// * `null`の場合は自動設定
	// * ボンディング構成する場合は1要素の配列
	// * ボンディングなしの場合は2要素の配列
	PortNicknames *[]string `json:"port_nicknames"`
}

// DedicatedSubnet defines model for dedicated_subnet.
type DedicatedSubnet struct {
	// 設定変更によるロック状態
	// `operational` 以外の状態では各種設定変更は不可
	//
	// * `operational` - 操作可能
	// * `configure_lb` - LBを設定中
	// * `configure_fw` - FWを設定中
	// * `enable_ipv6` - IPv6設定中
	// * `administrative_lock` - 機器交換などの作業を行っている
	ConfigStatus DedicatedSubnetConfigStatus `json:"config_status"`

	// 専用グローバルネットワークのサービスコード
	DedicatedSubnetId string `json:"dedicated_subnet_id"`

	// 割り当て済みファイアウォール(利用していない場合は`null`)
	Firewall *AttachedFirewall `json:"firewall"`
	Ipv4     Ipv4              `json:"ipv4"`
	Ipv6     Ipv6              `json:"ipv6"`

	// 割り当て済みロードバランサー(利用していない場合は`null`)
	LoadBalancer *AttachedLoadBalancer `json:"load_balancer"`

	// 割り当て済みサーバー数
	ServerCount int `json:"server_count"`

	// サービス情報
	Service ServiceQuiet `json:"service"`
	Zone    Zone         `json:"zone"`
}

// 設定変更によるロック状態
// `operational` 以外の状態では各種設定変更は不可
//
// * `operational` - 操作可能
// * `configure_lb` - LBを設定中
// * `configure_fw` - FWを設定中
// * `enable_ipv6` - IPv6設定中
// * `administrative_lock` - 機器交換などの作業を行っている
type DedicatedSubnetConfigStatus string

// DedicatedSubnets defines model for dedicated_subnets.
type DedicatedSubnets struct {
	DedicatedSubnets []DedicatedSubnet `json:"dedicated_subnets"`
	Meta             PaginateMeta      `json:"meta"`
}

// EnableServerPortParameter defines model for enable_server_port_parameter.
type EnableServerPortParameter struct {
	// 通信を有効にする場合に `true`
	Enable bool `json:"enable"`
}

// HybridConnection defines model for hybrid_connection.
type HybridConnection struct {
	// 接続先別ハイブリッド接続のサービスコード
	BridgeServiceId *string `json:"bridge_service_id,omitempty"`

	// 接続先サービスでの一意なネットワーク識別子
	DestinationSideId *string `json:"destination_side_id,omitempty"`

	// 接続先を分類する名称
	ServiceName *string `json:"service_name,omitempty"`
}

// HybridConnections defines model for hybrid_connections.
type HybridConnections struct {
	Destinations []HybridConnection `json:"destinations"`

	// ハイブリッド接続のサービスコード
	ServiceId string `json:"service_id"`
}

// ネットワークインターフェースの接続ポート情報
type InterfacePort struct {
	// ポート有効状態(通信が有効になっている場合 `true`)
	Enabled bool `json:"enabled"`

	// グローバル側の帯域幅(Mbps)
	// ボンディングされている場合は合計値
	GlobalBandwidthMbps *int `json:"global_bandwidth_mbps"`

	// グローバルネットワーク情報
	// このポートにインターネット接続が割り当てられていない場合は`null`
	Internet *Internet `json:"internet"`

	// ローカル側の帯域幅(Mbps)
	// ボンディングされている場合は合計値
	LocalBandwidthMbps *int `json:"local_bandwidth_mbps"`

	// 動作モード(初期化後の未設定時は`null`)
	Mode *InterfacePortMode `json:"mode"`

	// インターフェース名称
	Nickname string `json:"nickname"`

	// 所属ポートチャネルID
	PortChannelId int `json:"port_channel_id"`

	// ポートID
	PortId          int                      `json:"port_id"`
	PrivateNetworks []AttachedPrivateNetwork `json:"private_networks"`
}

// 動作モード(初期化後の未設定時は`null`)
type InterfacePortMode string

// グローバルネットワーク情報
// このポートにインターネット接続が割り当てられていない場合は`null`
type Internet struct {
	// 専用グローバルネットワーク情報(共用グローバルネットワーク割り当て時は`null`)
	DedicatedSubnet *AttachedDedicatedSubnet `json:"dedicated_subnet"`

	// ネットワークアドレス
	NetworkAddress string `json:"network_address"`

	// ネットワーク長
	PrefixLength int `json:"prefix_length"`

	// グローバルネットワーク分類
	//
	// * `common_subnet` - 共用グローバルネットワークのIPアドレスを割り当て
	// * `dedicated_subnet` - 専用グローバルネットワーク割り当て
	SubnetType InternetSubnetType `json:"subnet_type"`
}

// グローバルネットワーク分類
//
// * `common_subnet` - 共用グローバルネットワークのIPアドレスを割り当て
// * `dedicated_subnet` - 専用グローバルネットワーク割り当て
type InternetSubnetType string

// 入力値に対するエラーを構造化した情報
// (titleが`invalid`の場合のみ)
//
// * `non_field_errors` - リクエスト全体に起因した(単一項目でない)エラー内容
// * `*` - 対応した入力項目ごとのエラー内容
type InvalidParameter struct {
	NonFieldErrors       *InvalidParameterDetails           `json:"non_field_errors,omitempty"`
	AdditionalProperties map[string]InvalidParameterDetails `json:"-"`
}

// InvalidParameterDetail defines model for invalid_parameter_detail.
type InvalidParameterDetail struct {
	// エラー内容を示す簡潔な識別子
	Code string `json:"code"`

	// 人間のためのエラーメッセージ
	Message string `json:"message"`
}

// InvalidParameterDetails defines model for invalid_parameter_details.
type InvalidParameterDetails []InvalidParameterDetail

// Ipam defines model for ipam.
type Ipam struct {
	// IPアドレスに対しての説明文
	Description *string `json:"description,omitempty"`

	// 専用グローバルネットワークのIPアドレス
	IpAddress *string `json:"ip_address,omitempty"`
	Server    *struct {
		// サーバーの名称
		Nickname *string `json:"nickname,omitempty"`

		// サーバーのサービスコード(用途分類が`server`の場合のみ)
		ServerId *string `json:"server_id,omitempty"`
	} `json:"server"`

	// 割り当て用途分類
	//
	// * `gateway` - ゲートウェイアドレス
	// * `gateway_real` - ゲートウェイ機器実機
	// * `load_balancer` - ロードバランサー
	// * `server` - サーバー
	// * `void` - 用途登録なし
	Type *IpamType `json:"type,omitempty"`

	// 逆引きDNSを設定しているか否か(設定済みの場合 `true`)
	UseRdns *bool `json:"use_rdns,omitempty"`
}

// 割り当て用途分類
//
// * `gateway` - ゲートウェイアドレス
// * `gateway_real` - ゲートウェイ機器実機
// * `load_balancer` - ロードバランサー
// * `server` - サーバー
// * `void` - 用途登録なし
type IpamType string

// Ipv4 defines model for ipv4.
type Ipv4 struct {
	// ブロードキャストアドレス
	BroadcastAddress string `json:"broadcast_address"`

	// ゲートウェイアドレス
	GatewayAddress string `json:"gateway_address"`

	// ネットワークアドレス
	NetworkAddress string `json:"network_address"`

	// ネットワーク長
	PrefixLength int `json:"prefix_length"`

	// 特別な用途で割り当て済みのIPアドレスのリスト
	SpecialUseAddresses *[]Ipam `json:"special_use_addresses,omitempty"`
}

// Ipv6 defines model for ipv6.
type Ipv6 struct {
	// ブロードキャストアドレス
	BroadcastAddress string `json:"broadcast_address"`

	// IPv6が有効になっているか
	Enabled bool `json:"enabled"`

	// ゲートウェイアドレス
	GatewayAddress string `json:"gateway_address"`

	// ネットワークIPアドレス
	NetworkAddress string `json:"network_address"`

	// ネットワーク長
	PrefixLength int `json:"prefix_length"`

	// 特別な用途で割り当て済みのIPアドレスのリスト
	SpecialUseAddresses *[]struct {
		IpAddress *string `json:"ip_address,omitempty"`

		// 割り当て用途分類
		//
		// * `gateway` - ゲートウェイアドレス
		// * `gateway_real` - ゲートウェイ機器実機
		Type *Ipv6SpecialUseAddressesType `json:"type,omitempty"`
	} `json:"special_use_addresses,omitempty"`
}

// 割り当て用途分類
//
// * `gateway` - ゲートウェイアドレス
// * `gateway_real` - ゲートウェイ機器実機
type Ipv6SpecialUseAddressesType string

// OsImage defines model for os_image.
type OsImage struct {
	// パーティション手動構成が可能か
	// (パーティション構成の指定が可能な場合に `true`)
	ManualPartition bool `json:"manual_partition"`

	// OSの名称
	Name string `json:"name"`

	// インストール実行時に指定するOSイメージ名
	OsImageId string `json:"os_image_id"`

	// インストール時にパスワード指定が必要か
	// (パスワード指定が必要な場合 `true`)
	RequirePassword bool `json:"require_password"`

	// OSインストール時に作成される管理ユーザー名
	SuperuserName string `json:"superuser_name"`
}

// OsInstallParameter defines model for os_install_parameter.
type OsInstallParameter struct {
	// リモートコンソールを利用し手動パーティション指定を行う
	// (OSが対応している場合のみ)
	ManualPartition bool `json:"manual_partition"`

	// インストールするOSイメージ名
	OsImageId string `json:"os_image_id"`

	// 英数字と記号の組み合わせ
	// 1文字以上のアルファベットと1文字以上の数字が必須
	Password PasswordInput `json:"password"`
}

// PaginateMeta defines model for paginate_meta.
type PaginateMeta struct {
	// 総件数
	Count int `json:"count"`
}

// 英数字と記号の組み合わせ
// 1文字以上のアルファベットと1文字以上の数字が必須
type PasswordInput string

// ネットワークインターフェース ポートチャネル情報
type PortChannel struct {
	// ボンディング方式
	//
	// * `lacp` - LACP
	// * `static` - static link aggregation
	// * `single` - ボンディングなし(単体構成)
	BondingType BondingType `json:"bonding_type"`

	// 提供速度分類
	//
	// * `1gbe` - 1GbE
	// * `10gbe` - 10GbE
	LinkSpeedType PortChannelLinkSpeedType `json:"link_speed_type"`

	// 設定変更によるロック状態(ロック中の場合は `true`)
	Locked bool `json:"locked"`

	// ポートチャネルID
	PortChannelId int `json:"port_channel_id"`

	// ポートチャネルを構成するポートIDのリスト
	Ports []int `json:"ports"`
}

// 提供速度分類
//
// * `1gbe` - 1GbE
// * `10gbe` - 10GbE
type PortChannelLinkSpeedType string

// PowerControlParameter defines model for power_control_parameter.
type PowerControlParameter struct {
	// 操作内容
	//
	// * `on` - 電源ON
	// * `soft` - ACPIシャットダウン(OSでの電源シャットダウン)
	// * `reset` - ハードウェア電源リセット(電源OFF+電源ON)
	// * `off` - ハードウェア電源OFF
	Operation ServerPowerOperations `json:"operation"`
}

// PrivateNetwork defines model for private_network.
type PrivateNetwork struct {
	Hybrid HybridConnections `json:"hybrid"`

	// ローカルネットワークのID
	PrivateNetworkId string `json:"private_network_id"`

	// 接続済みサーバー数
	ServerCount int `json:"server_count"`

	// サービス情報
	Service ServiceQuiet `json:"service"`

	// VLAN ID
	VlanId int  `json:"vlan_id"`
	Zone   Zone `json:"zone"`
}

// PrivateNetworks defines model for private_networks.
type PrivateNetworks struct {
	Meta            PaginateMeta     `json:"meta"`
	PrivateNetworks []PrivateNetwork `json:"private_networks"`
}

// ProblemDetails400 defines model for problem_details_400.
type ProblemDetails400 struct {
	// 人間のためのエラーメッセージ
	Detail string `json:"detail"`

	// 入力値に対するエラーを構造化した情報
	// (titleが`invalid`の場合のみ)
	//
	// * `non_field_errors` - リクエスト全体に起因した(単一項目でない)エラー内容
	// * `*` - 対応した入力項目ごとのエラー内容
	InvalidParameters *InvalidParameter `json:"invalid_parameters"`

	// HTTPステータスコード
	Status int `json:"status"`

	// エラー内容を示す簡潔な識別子
	//
	// * `invalid` - 不正なリクエスト値,リクエスト値が妥当でない
	// * `parse_error` - 不正な形式,リクエスト値を読み取ることができない
	Title ProblemDetails400Title `json:"title"`
	Type  string                 `json:"type"`
}

// エラー内容を示す簡潔な識別子
//
// * `invalid` - 不正なリクエスト値,リクエスト値が妥当でない
// * `parse_error` - 不正な形式,リクエスト値を読み取ることができない
type ProblemDetails400Title string

// ProblemDetails401 defines model for problem_details_401.
type ProblemDetails401 struct {
	// エラー内容を示す簡潔な識別子
	ErrorCode ProblemDetails401ErrorCode `json:"error_code"`

	// 人間のためのエラーメッセージ
	ErrorMsg string `json:"error_msg"`

	// HTTPステータスコード
	Status string `json:"status"`
}

// エラー内容を示す簡潔な識別子
type ProblemDetails401ErrorCode string

// ProblemDetails404 defines model for problem_details_404.
type ProblemDetails404 struct {
	// 人間のためのエラーメッセージ
	Detail string `json:"detail"`

	// HTTPステータスコード
	Status int `json:"status"`

	// エラー内容を示す簡潔な識別子
	//
	// * `not_found` - 未検出
	Title ProblemDetails404Title `json:"title"`
	Type  string                 `json:"type"`
}

// エラー内容を示す簡潔な識別子
//
// * `not_found` - 未検出
type ProblemDetails404Title string

// ProblemDetails409 defines model for problem_details_409.
type ProblemDetails409 struct {
	// 人間のためのエラーメッセージ
	Detail string `json:"detail"`

	// HTTPステータスコード
	Status int `json:"status"`

	// エラー内容を示す簡潔な識別子
	//
	// * `conflict` - 競合を検出
	Title ProblemDetails409Title `json:"title"`
	Type  string                 `json:"type"`
}

// エラー内容を示す簡潔な識別子
//
// * `conflict` - 競合を検出
type ProblemDetails409Title string

// ProblemDetails429 defines model for problem_details_429.
type ProblemDetails429 struct {
	// 人間のためのエラーメッセージ
	Detail string `json:"detail"`

	// HTTPステータスコード
	Status int `json:"status"`

	// エラー内容を示す簡潔な識別子
	//
	// * `throttled` - リクエスト数制限に達している
	Title ProblemDetails429Title `json:"title"`
	Type  string                 `json:"type"`
}

// エラー内容を示す簡潔な識別子
//
// * `throttled` - リクエスト数制限に達している
type ProblemDetails429Title string

// ProblemDetails503 defines model for problem_details_503.
type ProblemDetails503 struct {
	// 人間のためのエラーメッセージ
	Detail string `json:"detail"`

	// HTTPステータスコード
	Status int `json:"status"`

	// エラー内容を示す簡潔な識別子
	//
	// * `temporary_unavailable` - 一時的に利用不可
	Title ProblemDetails503Title `json:"title"`
	Type  string                 `json:"type"`
}

// エラー内容を示す簡潔な識別子
//
// * `temporary_unavailable` - 一時的に利用不可
type ProblemDetails503Title string

// RaidLogicalVolume defines model for raid_logical_volume.
type RaidLogicalVolume struct {
	PhysicalDeviceIds []string `json:"physical_device_ids"`

	// RAIDレベル
	RaidLevel string `json:"raid_level"`

	// このRAID論理ボリュームの状態
	Status RaidLogicalVolumeStatus `json:"status"`

	// このサーバーのRAID論理ボリュームの一意な識別子
	VolumeId string `json:"volume_id"`
}

// このRAID論理ボリュームの状態
type RaidLogicalVolumeStatus string

// RaidPhysicalDevice defines model for raid_physical_device.
type RaidPhysicalDevice struct {
	// サーバーの物理ストレージデバイスの一意な識別子
	DeviceId string `json:"device_id"`

	// 接続スロット番号
	Slot int `json:"slot"`

	// この物理ストレージデバイスの状態
	//
	// * `ok` - 正常
	// * `failed` - 異常を検知
	Status RaidPhysicalDeviceStatus `json:"status"`
}

// この物理ストレージデバイスの状態
//
// * `ok` - 正常
// * `failed` - 異常を検知
type RaidPhysicalDeviceStatus string

// RaidStatus defines model for raid_status.
type RaidStatus struct {
	// 作成済みRAID論理ボリュームのリスト
	LogicalVolumes []RaidLogicalVolume `json:"logical_volumes"`

	// RAID状態を取得した時刻
	Monitored time.Time `json:"monitored"`

	// 総合的なRAID論理ボリューム状態
	//
	// * `ok` - 全てのRAID論理ボリュームと物理デバイスが正常
	// * `rebuilding` - 再構築中のRAID論理ボリュームが1つ以上ある(物理デバイスは全て正常、冗長性は低下している)
	// * `degraded` - 異常検出した物理デバイスが1つ以上ある(論理ボリュームは利用可能、冗長性は低下している)
	// * `failed` - 故障したRAID論理ボリュームが1つ以上ある(2つ以上の物理デバイスに異常があるRAID5など)
	// * `null` - RAID論理ボリュームがない
	//
	// `failed > degraded > rebuilding > ok` の順でより深刻なものが選択される
	OverallStatus *RaidStatusOverallStatus `json:"overall_status"`

	// 認識済み物理ストレージデバイスのリスト
	PhysicalDevices []RaidPhysicalDevice `json:"physical_devices"`
}

// 総合的なRAID論理ボリューム状態
//
// * `ok` - 全てのRAID論理ボリュームと物理デバイスが正常
// * `rebuilding` - 再構築中のRAID論理ボリュームが1つ以上ある(物理デバイスは全て正常、冗長性は低下している)
// * `degraded` - 異常検出した物理デバイスが1つ以上ある(論理ボリュームは利用可能、冗長性は低下している)
// * `failed` - 故障したRAID論理ボリュームが1つ以上ある(2つ以上の物理デバイスに異常があるRAID5など)
// * `null` - RAID論理ボリュームがない
//
// `failed > degraded > rebuilding > ok` の順でより深刻なものが選択される
type RaidStatusOverallStatus string

// Server defines model for server.
type Server struct {
	// キャッシュされた電源状態(未キャッシュならば`null`)
	CachedPowerStatus *CachedPowerStatus `json:"cached_power_status"`

	// グローバルIPアドレス割り当て情報(未設定時は`null`)
	Ipv4 *ServerIpv4Global `json:"ipv4"`

	// 設定変更処理によるロック状態
	// `null`以外がセットされている場合は
	// OS再インストール,ネットワークIF設定(VLAN,通信無効など),電源操作を受け付けない
	//
	// * `os_install` - OSインストール処理中
	// * `configure_raid` - RAID設定処理中
	// * `administrative_lock` - 機器交換,増設などの作業を行っている
	// * `null` - 設定変更を行っていない(処理を完了している)
	LockStatus   *ServerLockStatus `json:"lock_status"`
	PortChannels []PortChannel     `json:"port_channels"`
	Ports        []InterfacePort   `json:"ports"`

	// サーバーのサービスコード
	ServerId string `json:"server_id"`

	// サービス情報
	Service ServiceQuiet `json:"service"`
	Spec    ServerSpec   `json:"spec"`
	Zone    Zone         `json:"zone"`
}

// 設定変更処理によるロック状態
// `null`以外がセットされている場合は
// OS再インストール,ネットワークIF設定(VLAN,通信無効など),電源操作を受け付けない
//
// * `os_install` - OSインストール処理中
// * `configure_raid` - RAID設定処理中
// * `administrative_lock` - 機器交換,増設などの作業を行っている
// * `null` - 設定変更を行っていない(処理を完了している)
type ServerLockStatus string

// グローバルIPアドレス割り当て情報(未設定時は`null`)
type ServerIpv4Global struct {
	// ゲートウェイアドレス
	GatewayAddress string `json:"gateway_address"`

	// IPアドレス
	IpAddress string `json:"ip_address"`

	// DNSサーバーリスト
	NameServers []string `json:"name_servers"`

	// ネットワークアドレス
	NetworkAddress string `json:"network_address"`

	// ネットワーク長
	PrefixLength int `json:"prefix_length"`

	// IPアドレスの種類
	//
	// * `common_ip_address` - 共用グローバルネットワークのIPアドレス
	// * `dedicated_ip_address` - 専用グローバルネットワークのIPアドレス(割り当て設定が必要)
	Type ServerIpv4GlobalType `json:"type"`
}

// IPアドレスの種類
//
// * `common_ip_address` - 共用グローバルネットワークのIPアドレス
// * `dedicated_ip_address` - 専用グローバルネットワークのIPアドレス(割り当て設定が必要)
type ServerIpv4GlobalType string

// 操作内容
//
// * `on` - 電源ON
// * `soft` - ACPIシャットダウン(OSでの電源シャットダウン)
// * `reset` - ハードウェア電源リセット(電源OFF+電源ON)
// * `off` - ハードウェア電源OFF
type ServerPowerOperations string

// ServerPowerStatus defines model for server_power_status.
type ServerPowerStatus struct {
	// サーバーの電源状態
	//
	// * `on` - 起動
	// * `off` - 停止
	Status ServerPowerStatusStatus `json:"status"`
}

// サーバーの電源状態
//
// * `on` - 起動
// * `off` - 停止
type ServerPowerStatusStatus string

// ServerSpec defines model for server_spec.
type ServerSpec struct {
	// CPUクロック数(GHz)
	CpuClockSpeed float32 `json:"cpu_clock_speed"`

	// 総CPUコア数
	CpuCoreCount int `json:"cpu_core_count"`

	// 物理CPU数
	CpuCount int `json:"cpu_count"`

	// CPU製品モデル名
	CpuModelName string `json:"cpu_model_name"`

	// 総メモリ数(GB)
	MemorySize int `json:"memory_size"`

	// 10GbEネットワークインターフェース ポートチャネル数
	PortChannel10gbeCount int `json:"port_channel_10gbe_count"`

	// 1GbEネットワークインターフェース ポートチャネル数
	PortChannel1gbeCount int `json:"port_channel_1gbe_count"`

	// ストレージ構成情報
	// 同一構成(接続方式,記録方式,容量)ごとの配列
	Storages []Storage `json:"storages"`

	// ストレージ構成物理デバイス数の合計
	TotalStorageDeviceCount int `json:"total_storage_device_count"`
}

// Servers defines model for servers.
type Servers struct {
	Meta    PaginateMeta `json:"meta"`
	Servers []Server     `json:"servers"`
}

// Service defines model for service.
type Service struct {
	// 利用開始日時
	Activated time.Time `json:"activated"`

	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname    string `json:"nickname"`
	OptionPlans *[]struct {
		// プラン名称
		Name *string `json:"name,omitempty"`

		// オプション申込区分
		//
		// * `upgrade_memory` - 拡張メモリ
		// * `upgrade_storage` - ストレージ変更
		// * `additional_storage1` - 追加ストレージ1
		// * `additional_storage2` - 追加ストレージ2
		// * `additional_storage3` - 追加ストレージ3
		// * `additional_nvme_storage1` - 追加NVMeストレージ1
		// * `additional_nvme_storage2` - 追加NVMeストレージ2
		// * `os` - 有償OS
		// * `global_bandwidth` - インターネット帯域オプション
		// * `local_bandwidth` - ローカルネットワーク帯域オプション
		OptionClass *ServiceOptionPlansOptionClass `json:"option_class,omitempty"`

		// プランID
		PlanId *string `json:"plan_id,omitempty"`
	} `json:"option_plans,omitempty"`

	// プラン情報(ローカルネットワークの場合は`null`)
	Plan *ServicePlan `json:"plan"`

	// サービスの種類
	//
	// * `server` - サーバー
	// * `dedicated_subnet` - 専用グローバルネットワーク
	// * `private_network` - ローカルネットワーク
	// * `firewall` - ファイアウォール
	// * `load_balancer` - ロードバランサー
	ProductCategory ServiceProductCategory `json:"product_category"`
	ServiceId       string                 `json:"service_id"`
	Tags            []Tag                  `json:"tags"`
}

// オプション申込区分
//
// * `upgrade_memory` - 拡張メモリ
// * `upgrade_storage` - ストレージ変更
// * `additional_storage1` - 追加ストレージ1
// * `additional_storage2` - 追加ストレージ2
// * `additional_storage3` - 追加ストレージ3
// * `additional_nvme_storage1` - 追加NVMeストレージ1
// * `additional_nvme_storage2` - 追加NVMeストレージ2
// * `os` - 有償OS
// * `global_bandwidth` - インターネット帯域オプション
// * `local_bandwidth` - ローカルネットワーク帯域オプション
type ServiceOptionPlansOptionClass string

// サービスの種類
//
// * `server` - サーバー
// * `dedicated_subnet` - 専用グローバルネットワーク
// * `private_network` - ローカルネットワーク
// * `firewall` - ファイアウォール
// * `load_balancer` - ロードバランサー
type ServiceProductCategory string

// プラン情報(ローカルネットワークの場合は`null`)
type ServicePlan struct {
	Name   string `json:"name"`
	PlanId string `json:"plan_id"`
}

// サービス情報
type ServiceQuiet struct {
	// 利用開始日時
	Activated time.Time `json:"activated"`

	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname string `json:"nickname"`

	// サービスコード
	ServiceId string `json:"service_id"`
	Tags      *[]Tag `json:"tags,omitempty"`
}

// Services defines model for services.
type Services struct {
	Meta     PaginateMeta `json:"meta"`
	Services []Service    `json:"services"`
}

// Storage defines model for storage.
type Storage struct {
	// ストレージ接続方式
	//
	// * `sata` - SATA
	// * `sas` - SAS
	// * `nvme` - NVMe(PCIe)
	BusType StorageBusType `json:"bus_type"`

	// ストレージ構成物理デバイス数
	DeviceCount int `json:"device_count"`

	// ストレージ記録方式
	//
	// * `hdd` - 磁気HDD
	// * `ssd` - SSD
	// * `flash_memory` - Flash Memory(不揮発性メモリ)
	MediaType StorageMediaType `json:"media_type"`

	// ストレージ1つあたりの容量(GB)
	Size int `json:"size"`
}

// ストレージ接続方式
//
// * `sata` - SATA
// * `sas` - SAS
// * `nvme` - NVMe(PCIe)
type StorageBusType string

// ストレージ記録方式
//
// * `hdd` - 磁気HDD
// * `ssd` - SSD
// * `flash_memory` - Flash Memory(不揮発性メモリ)
type StorageMediaType string

// Tag defines model for tag.
type Tag struct {
	// タグの色
	Color *string `json:"color"`

	// タグの名称
	Label string `json:"label"`

	// タグID
	TagId int `json:"tag_id"`
}

// TrafficGraph defines model for traffic_graph.
type TrafficGraph struct {
	// 受信方向トラフィック
	Receive []TrafficGraphData `json:"receive"`

	// 送信方向トラフィック
	Transmit []TrafficGraphData `json:"transmit"`
}

// TrafficGraphData defines model for traffic_graph_data.
type TrafficGraphData struct {
	// 取得時刻
	Timestamp time.Time `json:"timestamp"`

	// 1つ前のデータからの平均トラフィック(bps)
	Value int `json:"value"`
}

// UpdateServerPortParameter defines model for update_server_port_parameter.
type UpdateServerPortParameter struct {
	// ポート名称
	Nickname string `json:"nickname"`
}

// UpdateServiceParameter defines model for update_service_parameter.
type UpdateServiceParameter struct {
	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname string `json:"nickname"`
}

// Zone defines model for zone.
type Zone struct {
	// 地域名
	Region string `json:"region"`

	// ネットワークゾーンID
	ZoneId int `json:"zone_id"`
}

// DedicatedSubnetId defines model for dedicated_subnet_id.
type DedicatedSubnetId string

// FreeWordFilter defines model for free_word_filter.
type FreeWordFilter []string

// HeaderRequestedWith defines model for header_requested_with.
type HeaderRequestedWith string

// Limit defines model for limit.
type Limit int

// Offset defines model for offset.
type Offset int

// PortChannelId defines model for port_channel_id.
type PortChannelId int

// PortId defines model for port_id.
type PortId int

// PrivateNetworkId defines model for private_network_id.
type PrivateNetworkId string

// ServerId defines model for server_id.
type ServerId string

// ServiceId defines model for service_id.
type ServiceId string

// TagFilter defines model for tag_filter.
type TagFilter []string

// Generic400 defines model for generic_400.
type Generic400 ProblemDetails400

// Generic401 defines model for generic_401.
type Generic401 ProblemDetails401

// Generic429 defines model for generic_429.
type Generic429 ProblemDetails429

// ListDedicatedSubnetsParams defines parameters for ListDedicatedSubnets.
type ListDedicatedSubnetsParams struct {
	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *ListDedicatedSubnetsParamsOrdering `json:"ordering,omitempty"`
}

// ListDedicatedSubnetsParamsOrdering defines parameters for ListDedicatedSubnets.
type ListDedicatedSubnetsParamsOrdering string

// ReadDedicatedSubnetParams defines parameters for ReadDedicatedSubnet.
type ReadDedicatedSubnetParams struct {
	// IPv6有効状態の最新状態を取得する
	Refresh *bool `json:"refresh,omitempty"`
}

// ListPrivateNetworksParams defines parameters for ListPrivateNetworks.
type ListPrivateNetworksParams struct {
	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *ListPrivateNetworksParamsOrdering `json:"ordering,omitempty"`
}

// ListPrivateNetworksParamsOrdering defines parameters for ListPrivateNetworks.
type ListPrivateNetworksParamsOrdering string

// ListServersParams defines parameters for ListServers.
type ListServersParams struct {
	// キャッシュされた電源状態で絞りこむ
	PowerStatus *ListServersParamsPowerStatus `json:"power_status,omitempty"`

	// インターネット接続状態の絞り込み
	//
	// * `common` - 共用グローバルネットワークを利用
	// * `void` - インターネット接続なし
	// * `{dedicated_subnet_id}` - 指定した専用グローバルネットワークを利用
	Internet *string `json:"internet,omitempty"`

	// ローカルネットワークの接続状態の絞り込み
	// このパラメーターが複数ある場合は**全てのネットワークに接続済み(AND)**が対象
	//
	// * `void` - ローカル接続なし
	// * `{private_network_id}` - 指定したローカルネットワークを利用
	PrivateNetwork *[]string `json:"private_network,omitempty"`

	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順の指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	// * `power_status_stored` - 電源状態更新日時順
	Ordering *ListServersParamsOrdering `json:"ordering,omitempty"`
}

// ListServersParamsPowerStatus defines parameters for ListServers.
type ListServersParamsPowerStatus string

// ListServersParamsOrdering defines parameters for ListServers.
type ListServersParamsOrdering string

// OSInstallJSONBody defines parameters for OSInstall.
type OSInstallJSONBody OsInstallParameter

// OSInstallParams defines parameters for OSInstall.
type OSInstallParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith OSInstallParamsXRequestedWith `json:"X-Requested-With"`
}

// OSInstallParamsXRequestedWith defines parameters for OSInstall.
type OSInstallParamsXRequestedWith string

// ServerConfigureBondingJSONBody defines parameters for ServerConfigureBonding.
type ServerConfigureBondingJSONBody ConfigureBondingParameter

// ServerConfigureBondingParams defines parameters for ServerConfigureBonding.
type ServerConfigureBondingParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith ServerConfigureBondingParamsXRequestedWith `json:"X-Requested-With"`
}

// ServerConfigureBondingParamsXRequestedWith defines parameters for ServerConfigureBonding.
type ServerConfigureBondingParamsXRequestedWith string

// UpdateServerPortJSONBody defines parameters for UpdateServerPort.
type UpdateServerPortJSONBody UpdateServerPortParameter

// UpdateServerPortParams defines parameters for UpdateServerPort.
type UpdateServerPortParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith UpdateServerPortParamsXRequestedWith `json:"X-Requested-With"`
}

// UpdateServerPortParamsXRequestedWith defines parameters for UpdateServerPort.
type UpdateServerPortParamsXRequestedWith string

// ServerAssignNetworkJSONBody defines parameters for ServerAssignNetwork.
type ServerAssignNetworkJSONBody AssignNetworkParameter

// ServerAssignNetworkParams defines parameters for ServerAssignNetwork.
type ServerAssignNetworkParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith ServerAssignNetworkParamsXRequestedWith `json:"X-Requested-With"`
}

// ServerAssignNetworkParamsXRequestedWith defines parameters for ServerAssignNetwork.
type ServerAssignNetworkParamsXRequestedWith string

// EnableServerPortJSONBody defines parameters for EnableServerPort.
type EnableServerPortJSONBody EnableServerPortParameter

// EnableServerPortParams defines parameters for EnableServerPort.
type EnableServerPortParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith EnableServerPortParamsXRequestedWith `json:"X-Requested-With"`
}

// EnableServerPortParamsXRequestedWith defines parameters for EnableServerPort.
type EnableServerPortParamsXRequestedWith string

// ReadServerTrafficByPortParams defines parameters for ReadServerTrafficByPort.
type ReadServerTrafficByPortParams struct {
	// 取得範囲始点(過去31日前まで,未指定時は7日前)
	Since *time.Time `json:"since,omitempty"`

	// 取得範囲終点(未指定時は現在時刻)
	Until *time.Time `json:"until,omitempty"`

	// データポイント間隔(秒)
	Step *ReadServerTrafficByPortParamsStep `json:"step,omitempty"`
}

// ReadServerTrafficByPortParamsStep defines parameters for ReadServerTrafficByPort.
type ReadServerTrafficByPortParamsStep int

// ServerPowerControlJSONBody defines parameters for ServerPowerControl.
type ServerPowerControlJSONBody PowerControlParameter

// ServerPowerControlParams defines parameters for ServerPowerControl.
type ServerPowerControlParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith ServerPowerControlParamsXRequestedWith `json:"X-Requested-With"`
}

// ServerPowerControlParamsXRequestedWith defines parameters for ServerPowerControl.
type ServerPowerControlParamsXRequestedWith string

// ReadRAIDStatusParams defines parameters for ReadRAIDStatus.
type ReadRAIDStatusParams struct {
	// 実機の最新状態を取得
	Refresh *bool `json:"refresh,omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// サービスの種類で絞りこむ
	ProductCategory *ListServicesParamsProductCategory `json:"product_category,omitempty"`

	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *ListServicesParamsOrdering `json:"ordering,omitempty"`
}

// ListServicesParamsProductCategory defines parameters for ListServices.
type ListServicesParamsProductCategory string

// ListServicesParamsOrdering defines parameters for ListServices.
type ListServicesParamsOrdering string

// UpdateServiceJSONBody defines parameters for UpdateService.
type UpdateServiceJSONBody UpdateServiceParameter

// UpdateServiceParams defines parameters for UpdateService.
type UpdateServiceParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith UpdateServiceParamsXRequestedWith `json:"X-Requested-With"`
}

// UpdateServiceParamsXRequestedWith defines parameters for UpdateService.
type UpdateServiceParamsXRequestedWith string

// OSInstallJSONRequestBody defines body for OSInstall for application/json ContentType.
type OSInstallJSONRequestBody OSInstallJSONBody

// ServerConfigureBondingJSONRequestBody defines body for ServerConfigureBonding for application/json ContentType.
type ServerConfigureBondingJSONRequestBody ServerConfigureBondingJSONBody

// UpdateServerPortJSONRequestBody defines body for UpdateServerPort for application/json ContentType.
type UpdateServerPortJSONRequestBody UpdateServerPortJSONBody

// ServerAssignNetworkJSONRequestBody defines body for ServerAssignNetwork for application/json ContentType.
type ServerAssignNetworkJSONRequestBody ServerAssignNetworkJSONBody

// EnableServerPortJSONRequestBody defines body for EnableServerPort for application/json ContentType.
type EnableServerPortJSONRequestBody EnableServerPortJSONBody

// ServerPowerControlJSONRequestBody defines body for ServerPowerControl for application/json ContentType.
type ServerPowerControlJSONRequestBody ServerPowerControlJSONBody

// UpdateServiceJSONRequestBody defines body for UpdateService for application/json ContentType.
type UpdateServiceJSONRequestBody UpdateServiceJSONBody

// Getter for additional properties for InvalidParameter. Returns the specified
// element and whether it was found
func (a InvalidParameter) Get(fieldName string) (value InvalidParameterDetails, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for InvalidParameter
func (a *InvalidParameter) Set(fieldName string, value InvalidParameterDetails) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]InvalidParameterDetails)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for InvalidParameter to handle AdditionalProperties
func (a *InvalidParameter) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["non_field_errors"]; found {
		err = json.Unmarshal(raw, &a.NonFieldErrors)
		if err != nil {
			return fmt.Errorf("error reading 'non_field_errors': %w", err)
		}
		delete(object, "non_field_errors")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]InvalidParameterDetails)
		for fieldName, fieldBuf := range object {
			var fieldVal InvalidParameterDetails
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for InvalidParameter to handle AdditionalProperties
func (a InvalidParameter) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NonFieldErrors != nil {
		object["non_field_errors"], err = json.Marshal(a.NonFieldErrors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'non_field_errors': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
