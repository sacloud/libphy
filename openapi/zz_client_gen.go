// Copyright 2021 The libphy authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDedicatedSubnets request
	GetDedicatedSubnets(ctx context.Context, params *GetDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDedicatedSubnetsDedicatedSubnetId request
	GetDedicatedSubnetsDedicatedSubnetId(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *GetDedicatedSubnetsDedicatedSubnetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateNetworks request
	GetPrivateNetworks(ctx context.Context, params *GetPrivateNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrivateNetworksPrivateNetworkId request
	GetPrivateNetworksPrivateNetworkId(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServers request
	GetServers(ctx context.Context, params *GetServersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerId request
	GetServersServerId(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdOsImages request
	GetServersServerIdOsImages(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServersServerIdOsInstall request with any body
	PostServersServerIdOsInstallWithBody(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServersServerIdOsInstall(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, body PostServersServerIdOsInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdPortChannelsPortChannelId request
	GetServersServerIdPortChannelsPortChannelId(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServersServerIdPortChannelsPortChannelIdConfigureBonding request with any body
	PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBody(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServersServerIdPortChannelsPortChannelIdConfigureBonding(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, body PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdPortsPortId request
	GetServersServerIdPortsPortId(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServersServerIdPortsPortId request with any body
	PatchServersServerIdPortsPortIdWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServersServerIdPortsPortId(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, body PatchServersServerIdPortsPortIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServersServerIdPortsPortIdAssignNetwork request with any body
	PostServersServerIdPortsPortIdAssignNetworkWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServersServerIdPortsPortIdAssignNetwork(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, body PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServersServerIdPortsPortIdEnable request with any body
	PostServersServerIdPortsPortIdEnableWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServersServerIdPortsPortIdEnable(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, body PostServersServerIdPortsPortIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdPortsPortIdTrafficGraph request
	GetServersServerIdPortsPortIdTrafficGraph(ctx context.Context, serverId ServerId, portId PortId, params *GetServersServerIdPortsPortIdTrafficGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServersServerIdPowerControl request with any body
	PostServersServerIdPowerControlWithBody(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServersServerIdPowerControl(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, body PostServersServerIdPowerControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdPowerStatus request
	GetServersServerIdPowerStatus(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServersServerIdRaidStatus request
	GetServersServerIdRaidStatus(ctx context.Context, serverId ServerId, params *GetServersServerIdRaidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServices request
	GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicesServiceId request
	GetServicesServiceId(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServicesServiceId request with any body
	PatchServicesServiceIdWithBody(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServicesServiceId(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, body PatchServicesServiceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDedicatedSubnets(ctx context.Context, params *GetDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDedicatedSubnetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDedicatedSubnetsDedicatedSubnetId(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *GetDedicatedSubnetsDedicatedSubnetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDedicatedSubnetsDedicatedSubnetIdRequest(c.Server, dedicatedSubnetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateNetworks(ctx context.Context, params *GetPrivateNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateNetworksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrivateNetworksPrivateNetworkId(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPrivateNetworksPrivateNetworkIdRequest(c.Server, privateNetworkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServers(ctx context.Context, params *GetServersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerId(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdOsImages(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdOsImagesRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdOsInstallWithBody(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdOsInstallRequestWithBody(c.Server, serverId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdOsInstall(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, body PostServersServerIdOsInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdOsInstallRequest(c.Server, serverId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdPortChannelsPortChannelId(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdPortChannelsPortChannelIdRequest(c.Server, serverId, portChannelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBody(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequestWithBody(c.Server, serverId, portChannelId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortChannelsPortChannelIdConfigureBonding(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, body PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequest(c.Server, serverId, portChannelId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdPortsPortId(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdPortsPortIdRequest(c.Server, serverId, portId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServersServerIdPortsPortIdWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServersServerIdPortsPortIdRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServersServerIdPortsPortId(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, body PatchServersServerIdPortsPortIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServersServerIdPortsPortIdRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortsPortIdAssignNetworkWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortsPortIdAssignNetworkRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortsPortIdAssignNetwork(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, body PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortsPortIdAssignNetworkRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortsPortIdEnableWithBody(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortsPortIdEnableRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPortsPortIdEnable(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, body PostServersServerIdPortsPortIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPortsPortIdEnableRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdPortsPortIdTrafficGraph(ctx context.Context, serverId ServerId, portId PortId, params *GetServersServerIdPortsPortIdTrafficGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdPortsPortIdTrafficGraphRequest(c.Server, serverId, portId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPowerControlWithBody(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPowerControlRequestWithBody(c.Server, serverId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServersServerIdPowerControl(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, body PostServersServerIdPowerControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServersServerIdPowerControlRequest(c.Server, serverId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdPowerStatus(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdPowerStatusRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServersServerIdRaidStatus(ctx context.Context, serverId ServerId, params *GetServersServerIdRaidStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServersServerIdRaidStatusRequest(c.Server, serverId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServices(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicesServiceId(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicesServiceIdRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServicesServiceIdWithBody(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesServiceIdRequestWithBody(c.Server, serviceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServicesServiceId(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, body PatchServicesServiceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServicesServiceIdRequest(c.Server, serviceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDedicatedSubnetsRequest generates requests for GetDedicatedSubnets
func NewGetDedicatedSubnetsRequest(server string, params *GetDedicatedSubnetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dedicated_subnets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDedicatedSubnetsDedicatedSubnetIdRequest generates requests for GetDedicatedSubnetsDedicatedSubnetId
func NewGetDedicatedSubnetsDedicatedSubnetIdRequest(server string, dedicatedSubnetId DedicatedSubnetId, params *GetDedicatedSubnetsDedicatedSubnetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dedicated_subnet_id", runtime.ParamLocationPath, dedicatedSubnetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dedicated_subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Refresh != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateNetworksRequest generates requests for GetPrivateNetworks
func NewGetPrivateNetworksRequest(server string, params *GetPrivateNetworksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private_networks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPrivateNetworksPrivateNetworkIdRequest generates requests for GetPrivateNetworksPrivateNetworkId
func NewGetPrivateNetworksPrivateNetworkIdRequest(server string, privateNetworkId PrivateNetworkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "private_network_id", runtime.ParamLocationPath, privateNetworkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private_networks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServersRequest generates requests for GetServers
func NewGetServersRequest(server string, params *GetServersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PowerStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "power_status", runtime.ParamLocationQuery, *params.PowerStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Internet != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internet", runtime.ParamLocationQuery, *params.Internet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PrivateNetwork != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "private_network", runtime.ParamLocationQuery, *params.PrivateNetwork); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServersServerIdRequest generates requests for GetServersServerId
func NewGetServersServerIdRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServersServerIdOsImagesRequest generates requests for GetServersServerIdOsImages
func NewGetServersServerIdOsImagesRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/os_images/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServersServerIdOsInstallRequest calls the generic PostServersServerIdOsInstall builder with application/json body
func NewPostServersServerIdOsInstallRequest(server string, serverId ServerId, params *PostServersServerIdOsInstallParams, body PostServersServerIdOsInstallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServersServerIdOsInstallRequestWithBody(server, serverId, params, "application/json", bodyReader)
}

// NewPostServersServerIdOsInstallRequestWithBody generates requests for PostServersServerIdOsInstall with any type of body
func NewPostServersServerIdOsInstallRequestWithBody(server string, serverId ServerId, params *PostServersServerIdOsInstallParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/os_install/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewGetServersServerIdPortChannelsPortChannelIdRequest generates requests for GetServersServerIdPortChannelsPortChannelId
func NewGetServersServerIdPortChannelsPortChannelIdRequest(server string, serverId ServerId, portChannelId PortChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_channel_id", runtime.ParamLocationPath, portChannelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/port_channels/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequest calls the generic PostServersServerIdPortChannelsPortChannelIdConfigureBonding builder with application/json body
func NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequest(server string, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, body PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequestWithBody(server, serverId, portChannelId, params, "application/json", bodyReader)
}

// NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequestWithBody generates requests for PostServersServerIdPortChannelsPortChannelIdConfigureBonding with any type of body
func NewPostServersServerIdPortChannelsPortChannelIdConfigureBondingRequestWithBody(server string, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_channel_id", runtime.ParamLocationPath, portChannelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/port_channels/%s/configure_bonding/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewGetServersServerIdPortsPortIdRequest generates requests for GetServersServerIdPortsPortId
func NewGetServersServerIdPortsPortIdRequest(server string, serverId ServerId, portId PortId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServersServerIdPortsPortIdRequest calls the generic PatchServersServerIdPortsPortId builder with application/json body
func NewPatchServersServerIdPortsPortIdRequest(server string, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, body PatchServersServerIdPortsPortIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServersServerIdPortsPortIdRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewPatchServersServerIdPortsPortIdRequestWithBody generates requests for PatchServersServerIdPortsPortId with any type of body
func NewPatchServersServerIdPortsPortIdRequestWithBody(server string, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewPostServersServerIdPortsPortIdAssignNetworkRequest calls the generic PostServersServerIdPortsPortIdAssignNetwork builder with application/json body
func NewPostServersServerIdPortsPortIdAssignNetworkRequest(server string, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, body PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServersServerIdPortsPortIdAssignNetworkRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewPostServersServerIdPortsPortIdAssignNetworkRequestWithBody generates requests for PostServersServerIdPortsPortIdAssignNetwork with any type of body
func NewPostServersServerIdPortsPortIdAssignNetworkRequestWithBody(server string, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/assign_network/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewPostServersServerIdPortsPortIdEnableRequest calls the generic PostServersServerIdPortsPortIdEnable builder with application/json body
func NewPostServersServerIdPortsPortIdEnableRequest(server string, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, body PostServersServerIdPortsPortIdEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServersServerIdPortsPortIdEnableRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewPostServersServerIdPortsPortIdEnableRequestWithBody generates requests for PostServersServerIdPortsPortIdEnable with any type of body
func NewPostServersServerIdPortsPortIdEnableRequestWithBody(server string, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/enable/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewGetServersServerIdPortsPortIdTrafficGraphRequest generates requests for GetServersServerIdPortsPortIdTrafficGraph
func NewGetServersServerIdPortsPortIdTrafficGraphRequest(server string, serverId ServerId, portId PortId, params *GetServersServerIdPortsPortIdTrafficGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/traffic_graph/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Step != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step", runtime.ParamLocationQuery, *params.Step); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServersServerIdPowerControlRequest calls the generic PostServersServerIdPowerControl builder with application/json body
func NewPostServersServerIdPowerControlRequest(server string, serverId ServerId, params *PostServersServerIdPowerControlParams, body PostServersServerIdPowerControlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServersServerIdPowerControlRequestWithBody(server, serverId, params, "application/json", bodyReader)
}

// NewPostServersServerIdPowerControlRequestWithBody generates requests for PostServersServerIdPowerControl with any type of body
func NewPostServersServerIdPowerControlRequestWithBody(server string, serverId ServerId, params *PostServersServerIdPowerControlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/power_control/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewGetServersServerIdPowerStatusRequest generates requests for GetServersServerIdPowerStatus
func NewGetServersServerIdPowerStatusRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/power_status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServersServerIdRaidStatusRequest generates requests for GetServersServerIdRaidStatus
func NewGetServersServerIdRaidStatusRequest(server string, serverId ServerId, params *GetServersServerIdRaidStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/raid_status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Refresh != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesRequest generates requests for GetServices
func NewGetServicesRequest(server string, params *GetServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ProductCategory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_category", runtime.ParamLocationQuery, *params.ProductCategory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicesServiceIdRequest generates requests for GetServicesServiceId
func NewGetServicesServiceIdRequest(server string, serviceId ServiceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServicesServiceIdRequest calls the generic PatchServicesServiceId builder with application/json body
func NewPatchServicesServiceIdRequest(server string, serviceId ServiceId, params *PatchServicesServiceIdParams, body PatchServicesServiceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServicesServiceIdRequestWithBody(server, serviceId, params, "application/json", bodyReader)
}

// NewPatchServicesServiceIdRequestWithBody generates requests for PatchServicesServiceId with any type of body
func NewPatchServicesServiceIdRequestWithBody(server string, serviceId ServiceId, params *PatchServicesServiceIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDedicatedSubnets request
	GetDedicatedSubnetsWithResponse(ctx context.Context, params *GetDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*GetDedicatedSubnetsResponse, error)

	// GetDedicatedSubnetsDedicatedSubnetId request
	GetDedicatedSubnetsDedicatedSubnetIdWithResponse(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *GetDedicatedSubnetsDedicatedSubnetIdParams, reqEditors ...RequestEditorFn) (*GetDedicatedSubnetsDedicatedSubnetIdResponse, error)

	// GetPrivateNetworks request
	GetPrivateNetworksWithResponse(ctx context.Context, params *GetPrivateNetworksParams, reqEditors ...RequestEditorFn) (*GetPrivateNetworksResponse, error)

	// GetPrivateNetworksPrivateNetworkId request
	GetPrivateNetworksPrivateNetworkIdWithResponse(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*GetPrivateNetworksPrivateNetworkIdResponse, error)

	// GetServers request
	GetServersWithResponse(ctx context.Context, params *GetServersParams, reqEditors ...RequestEditorFn) (*GetServersResponse, error)

	// GetServersServerId request
	GetServersServerIdWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdResponse, error)

	// GetServersServerIdOsImages request
	GetServersServerIdOsImagesWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdOsImagesResponse, error)

	// PostServersServerIdOsInstall request with any body
	PostServersServerIdOsInstallWithBodyWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdOsInstallResponse, error)

	PostServersServerIdOsInstallWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, body PostServersServerIdOsInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdOsInstallResponse, error)

	// GetServersServerIdPortChannelsPortChannelId request
	GetServersServerIdPortChannelsPortChannelIdWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*GetServersServerIdPortChannelsPortChannelIdResponse, error)

	// PostServersServerIdPortChannelsPortChannelIdConfigureBonding request with any body
	PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBodyWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse, error)

	PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, body PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse, error)

	// GetServersServerIdPortsPortId request
	GetServersServerIdPortsPortIdWithResponse(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*GetServersServerIdPortsPortIdResponse, error)

	// PatchServersServerIdPortsPortId request with any body
	PatchServersServerIdPortsPortIdWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServersServerIdPortsPortIdResponse, error)

	PatchServersServerIdPortsPortIdWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, body PatchServersServerIdPortsPortIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServersServerIdPortsPortIdResponse, error)

	// PostServersServerIdPortsPortIdAssignNetwork request with any body
	PostServersServerIdPortsPortIdAssignNetworkWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdAssignNetworkResponse, error)

	PostServersServerIdPortsPortIdAssignNetworkWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, body PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdAssignNetworkResponse, error)

	// PostServersServerIdPortsPortIdEnable request with any body
	PostServersServerIdPortsPortIdEnableWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdEnableResponse, error)

	PostServersServerIdPortsPortIdEnableWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, body PostServersServerIdPortsPortIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdEnableResponse, error)

	// GetServersServerIdPortsPortIdTrafficGraph request
	GetServersServerIdPortsPortIdTrafficGraphWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *GetServersServerIdPortsPortIdTrafficGraphParams, reqEditors ...RequestEditorFn) (*GetServersServerIdPortsPortIdTrafficGraphResponse, error)

	// PostServersServerIdPowerControl request with any body
	PostServersServerIdPowerControlWithBodyWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPowerControlResponse, error)

	PostServersServerIdPowerControlWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, body PostServersServerIdPowerControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPowerControlResponse, error)

	// GetServersServerIdPowerStatus request
	GetServersServerIdPowerStatusWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdPowerStatusResponse, error)

	// GetServersServerIdRaidStatus request
	GetServersServerIdRaidStatusWithResponse(ctx context.Context, serverId ServerId, params *GetServersServerIdRaidStatusParams, reqEditors ...RequestEditorFn) (*GetServersServerIdRaidStatusResponse, error)

	// GetServices request
	GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error)

	// GetServicesServiceId request
	GetServicesServiceIdWithResponse(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*GetServicesServiceIdResponse, error)

	// PatchServicesServiceId request with any body
	PatchServicesServiceIdWithBodyWithResponse(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServicesServiceIdResponse, error)

	PatchServicesServiceIdWithResponse(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, body PatchServicesServiceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesServiceIdResponse, error)
}

type GetDedicatedSubnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DedicatedSubnets *[]DedicatedSubnet `json:"dedicated_subnets,omitempty"`
		Meta             *PaginateMeta      `json:"meta,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetDedicatedSubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDedicatedSubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetDedicatedSubnetsResponse) Result() (*struct {
	DedicatedSubnets *[]DedicatedSubnet `json:"dedicated_subnets,omitempty"`
	Meta             *PaginateMeta      `json:"meta,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON429)
}

type GetDedicatedSubnetsDedicatedSubnetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DedicatedSubnet *DedicatedSubnet `json:"dedicated_subnet,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r GetDedicatedSubnetsDedicatedSubnetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDedicatedSubnetsDedicatedSubnetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetDedicatedSubnetsDedicatedSubnetIdResponse) Result() (*struct {
	DedicatedSubnet *DedicatedSubnet `json:"dedicated_subnet,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429, r.JSON503)
}

type GetPrivateNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta            *PaginateMeta     `json:"meta,omitempty"`
		PrivateNetworks *[]PrivateNetwork `json:"private_networks,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetPrivateNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetPrivateNetworksResponse) Result() (*struct {
	Meta            *PaginateMeta     `json:"meta,omitempty"`
	PrivateNetworks *[]PrivateNetwork `json:"private_networks,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON429)
}

type GetPrivateNetworksPrivateNetworkIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PrivateNetwork *PrivateNetwork `json:"private_network,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetPrivateNetworksPrivateNetworkIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPrivateNetworksPrivateNetworkIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetPrivateNetworksPrivateNetworkIdResponse) Result() (*struct {
	PrivateNetwork *PrivateNetwork `json:"private_network,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429)
}

type GetServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetServersResult
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersResponse) Result() (*GetServersResult, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON429)
}

type GetServersServerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Server *Server `json:"server,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdResponse) Result() (*struct {
	Server *Server `json:"server,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429)
}

type GetServersServerIdOsImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		OsImages *[]struct {
			// パーティション手動構成が可能か
			// (パーティション構成の指定が可能な場合に `true`)
			ManualPartition *bool `json:"manual_partition,omitempty"`

			// OSの名称
			Name *string `json:"name,omitempty"`

			// インストール実行時に指定するOSイメージ名
			OsImageId *string `json:"os_image_id,omitempty"`

			// インストール時にパスワード指定が必要か
			// (パスワード指定が必要な場合 `true`)
			RequirePassword *bool `json:"require_password,omitempty"`

			// OSインストール時に作成される管理ユーザー名
			SuperuserName *string `json:"superuser_name,omitempty"`
		} `json:"os_images,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdOsImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdOsImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdOsImagesResponse) Result() (*struct {
	OsImages *[]struct {
		// パーティション手動構成が可能か
		// (パーティション構成の指定が可能な場合に `true`)
		ManualPartition *bool `json:"manual_partition,omitempty"`

		// OSの名称
		Name *string `json:"name,omitempty"`

		// インストール実行時に指定するOSイメージ名
		OsImageId *string `json:"os_image_id,omitempty"`

		// インストール時にパスワード指定が必要か
		// (パスワード指定が必要な場合 `true`)
		RequirePassword *bool `json:"require_password,omitempty"`

		// OSインストール時に作成される管理ユーザー名
		SuperuserName *string `json:"superuser_name,omitempty"`
	} `json:"os_images,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429)
}

type PostServersServerIdOsInstallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON409      *ProblemDetails409
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PostServersServerIdOsInstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServersServerIdOsInstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostServersServerIdOsInstallResponse) Result() error {
	return eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON409, r.JSON429)
}

type GetServersServerIdPortChannelsPortChannelIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェース ポートチャネル情報
		PortChannel *PortChannel `json:"port_channel,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdPortChannelsPortChannelIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdPortChannelsPortChannelIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdPortChannelsPortChannelIdResponse) Result() (*struct {
	// ネットワークインターフェース ポートチャネル情報
	PortChannel *PortChannel `json:"port_channel,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON409, r.JSON429, r.JSON503)
}

type PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PortChannel *[]PortChannel `json:"port_channel,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/problem_details_400)
		ProblemDetails400 `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse) Result() (*struct {
	PortChannel *[]PortChannel `json:"port_channel,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON409, r.JSON429)
}

type GetServersServerIdPortsPortIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdPortsPortIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdPortsPortIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdPortsPortIdResponse) Result() (*struct {
	// ネットワークインターフェースの接続ポート情報
	Port *InterfacePort `json:"port,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429, r.JSON503)
}

type PatchServersServerIdPortsPortIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Port *[]InterfacePort `json:"port,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PatchServersServerIdPortsPortIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServersServerIdPortsPortIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PatchServersServerIdPortsPortIdResponse) Result() (*struct {
	Port *[]InterfacePort `json:"port,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON429)
}

type PostServersServerIdPortsPortIdAssignNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/problem_details_400)
		ProblemDetails400 `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PostServersServerIdPortsPortIdAssignNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServersServerIdPortsPortIdAssignNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostServersServerIdPortsPortIdAssignNetworkResponse) Result() (*struct {
	// ネットワークインターフェースの接続ポート情報
	Port *InterfacePort `json:"port,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON409, r.JSON429)
}

type PostServersServerIdPortsPortIdEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PostServersServerIdPortsPortIdEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServersServerIdPortsPortIdEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostServersServerIdPortsPortIdEnableResponse) Result() (*struct {
	// ネットワークインターフェースの接続ポート情報
	Port *InterfacePort `json:"port,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON409, r.JSON429)
}

type GetServersServerIdPortsPortIdTrafficGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TrafficGraph *struct {
			// 受信方向トラフィック
			Receive *[]struct {
				// 取得時刻
				Timestamp *time.Time `json:"timestamp,omitempty"`

				// 1つ前のデータからの平均トラフィック(bps)
				Value *int `json:"value,omitempty"`
			} `json:"receive,omitempty"`

			// 送信方向トラフィック
			Transmit *[]struct {
				// 取得時刻
				Timestamp *time.Time `json:"timestamp,omitempty"`

				// 1つ前のデータからの平均トラフィック(bps)
				Value *int `json:"value,omitempty"`
			} `json:"transmit,omitempty"`
		} `json:"traffic_graph,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdPortsPortIdTrafficGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdPortsPortIdTrafficGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdPortsPortIdTrafficGraphResponse) Result() (*struct {
	TrafficGraph *struct {
		// 受信方向トラフィック
		Receive *[]struct {
			// 取得時刻
			Timestamp *time.Time `json:"timestamp,omitempty"`

			// 1つ前のデータからの平均トラフィック(bps)
			Value *int `json:"value,omitempty"`
		} `json:"receive,omitempty"`

		// 送信方向トラフィック
		Transmit *[]struct {
			// 取得時刻
			Timestamp *time.Time `json:"timestamp,omitempty"`

			// 1つ前のデータからの平均トラフィック(bps)
			Value *int `json:"value,omitempty"`
		} `json:"transmit,omitempty"`
	} `json:"traffic_graph,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429)
}

type PostServersServerIdPowerControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON429      *ProblemDetails429
	JSON503      *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r PostServersServerIdPowerControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServersServerIdPowerControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PostServersServerIdPowerControlResponse) Result() error {
	return eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON429, r.JSON503)
}

type GetServersServerIdPowerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PowerStatus *ServerPowerStatus `json:"power_status,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdPowerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdPowerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdPowerStatusResponse) Result() (*struct {
	PowerStatus *ServerPowerStatus `json:"power_status,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429, r.JSON503)
}

type GetServersServerIdRaidStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RaidStatus *RaidStatus `json:"raid_status,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r GetServersServerIdRaidStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServersServerIdRaidStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServersServerIdRaidStatusResponse) Result() (*struct {
	RaidStatus *RaidStatus `json:"raid_status,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429, r.JSON503)
}

type GetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta     *PaginateMeta `json:"meta,omitempty"`
		Services *[]Service    `json:"services,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServicesResponse) Result() (*struct {
	Meta     *PaginateMeta `json:"meta,omitempty"`
	Services *[]Service    `json:"services,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON429)
}

type GetServicesServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Service *Service `json:"service,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r GetServicesServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicesServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r GetServicesServiceIdResponse) Result() (*struct {
	Service *Service `json:"service,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON401, r.JSON404, r.JSON429)
}

type PatchServicesServiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Service *Service `json:"service,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r PatchServicesServiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServicesServiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Result JSON200の結果、もしくは発生したエラーのいずれかを返す
func (r PatchServicesServiceIdResponse) Result() (*struct {
	Service *Service `json:"service,omitempty"`
}, error) {
	return r.JSON200, eCoalesce(r.JSON400, r.JSON401, r.JSON404, r.JSON429)
}

// GetDedicatedSubnetsWithResponse request returning *GetDedicatedSubnetsResponse
func (c *ClientWithResponses) GetDedicatedSubnetsWithResponse(ctx context.Context, params *GetDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*GetDedicatedSubnetsResponse, error) {
	rsp, err := c.GetDedicatedSubnets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDedicatedSubnetsResponse(rsp)
}

// GetDedicatedSubnetsDedicatedSubnetIdWithResponse request returning *GetDedicatedSubnetsDedicatedSubnetIdResponse
func (c *ClientWithResponses) GetDedicatedSubnetsDedicatedSubnetIdWithResponse(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *GetDedicatedSubnetsDedicatedSubnetIdParams, reqEditors ...RequestEditorFn) (*GetDedicatedSubnetsDedicatedSubnetIdResponse, error) {
	rsp, err := c.GetDedicatedSubnetsDedicatedSubnetId(ctx, dedicatedSubnetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDedicatedSubnetsDedicatedSubnetIdResponse(rsp)
}

// GetPrivateNetworksWithResponse request returning *GetPrivateNetworksResponse
func (c *ClientWithResponses) GetPrivateNetworksWithResponse(ctx context.Context, params *GetPrivateNetworksParams, reqEditors ...RequestEditorFn) (*GetPrivateNetworksResponse, error) {
	rsp, err := c.GetPrivateNetworks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateNetworksResponse(rsp)
}

// GetPrivateNetworksPrivateNetworkIdWithResponse request returning *GetPrivateNetworksPrivateNetworkIdResponse
func (c *ClientWithResponses) GetPrivateNetworksPrivateNetworkIdWithResponse(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*GetPrivateNetworksPrivateNetworkIdResponse, error) {
	rsp, err := c.GetPrivateNetworksPrivateNetworkId(ctx, privateNetworkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPrivateNetworksPrivateNetworkIdResponse(rsp)
}

// GetServersWithResponse request returning *GetServersResponse
func (c *ClientWithResponses) GetServersWithResponse(ctx context.Context, params *GetServersParams, reqEditors ...RequestEditorFn) (*GetServersResponse, error) {
	rsp, err := c.GetServers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersResponse(rsp)
}

// GetServersServerIdWithResponse request returning *GetServersServerIdResponse
func (c *ClientWithResponses) GetServersServerIdWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdResponse, error) {
	rsp, err := c.GetServersServerId(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdResponse(rsp)
}

// GetServersServerIdOsImagesWithResponse request returning *GetServersServerIdOsImagesResponse
func (c *ClientWithResponses) GetServersServerIdOsImagesWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdOsImagesResponse, error) {
	rsp, err := c.GetServersServerIdOsImages(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdOsImagesResponse(rsp)
}

// PostServersServerIdOsInstallWithBodyWithResponse request with arbitrary body returning *PostServersServerIdOsInstallResponse
func (c *ClientWithResponses) PostServersServerIdOsInstallWithBodyWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdOsInstallResponse, error) {
	rsp, err := c.PostServersServerIdOsInstallWithBody(ctx, serverId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdOsInstallResponse(rsp)
}

func (c *ClientWithResponses) PostServersServerIdOsInstallWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdOsInstallParams, body PostServersServerIdOsInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdOsInstallResponse, error) {
	rsp, err := c.PostServersServerIdOsInstall(ctx, serverId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdOsInstallResponse(rsp)
}

// GetServersServerIdPortChannelsPortChannelIdWithResponse request returning *GetServersServerIdPortChannelsPortChannelIdResponse
func (c *ClientWithResponses) GetServersServerIdPortChannelsPortChannelIdWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*GetServersServerIdPortChannelsPortChannelIdResponse, error) {
	rsp, err := c.GetServersServerIdPortChannelsPortChannelId(ctx, serverId, portChannelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdPortChannelsPortChannelIdResponse(rsp)
}

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBodyWithResponse request with arbitrary body returning *PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse
func (c *ClientWithResponses) PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBodyWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse, error) {
	rsp, err := c.PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithBody(ctx, serverId, portChannelId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse(rsp)
}

func (c *ClientWithResponses) PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams, body PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse, error) {
	rsp, err := c.PostServersServerIdPortChannelsPortChannelIdConfigureBonding(ctx, serverId, portChannelId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse(rsp)
}

// GetServersServerIdPortsPortIdWithResponse request returning *GetServersServerIdPortsPortIdResponse
func (c *ClientWithResponses) GetServersServerIdPortsPortIdWithResponse(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*GetServersServerIdPortsPortIdResponse, error) {
	rsp, err := c.GetServersServerIdPortsPortId(ctx, serverId, portId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdPortsPortIdResponse(rsp)
}

// PatchServersServerIdPortsPortIdWithBodyWithResponse request with arbitrary body returning *PatchServersServerIdPortsPortIdResponse
func (c *ClientWithResponses) PatchServersServerIdPortsPortIdWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServersServerIdPortsPortIdResponse, error) {
	rsp, err := c.PatchServersServerIdPortsPortIdWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServersServerIdPortsPortIdResponse(rsp)
}

func (c *ClientWithResponses) PatchServersServerIdPortsPortIdWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PatchServersServerIdPortsPortIdParams, body PatchServersServerIdPortsPortIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServersServerIdPortsPortIdResponse, error) {
	rsp, err := c.PatchServersServerIdPortsPortId(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServersServerIdPortsPortIdResponse(rsp)
}

// PostServersServerIdPortsPortIdAssignNetworkWithBodyWithResponse request with arbitrary body returning *PostServersServerIdPortsPortIdAssignNetworkResponse
func (c *ClientWithResponses) PostServersServerIdPortsPortIdAssignNetworkWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdAssignNetworkResponse, error) {
	rsp, err := c.PostServersServerIdPortsPortIdAssignNetworkWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortsPortIdAssignNetworkResponse(rsp)
}

func (c *ClientWithResponses) PostServersServerIdPortsPortIdAssignNetworkWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdAssignNetworkParams, body PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdAssignNetworkResponse, error) {
	rsp, err := c.PostServersServerIdPortsPortIdAssignNetwork(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortsPortIdAssignNetworkResponse(rsp)
}

// PostServersServerIdPortsPortIdEnableWithBodyWithResponse request with arbitrary body returning *PostServersServerIdPortsPortIdEnableResponse
func (c *ClientWithResponses) PostServersServerIdPortsPortIdEnableWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdEnableResponse, error) {
	rsp, err := c.PostServersServerIdPortsPortIdEnableWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortsPortIdEnableResponse(rsp)
}

func (c *ClientWithResponses) PostServersServerIdPortsPortIdEnableWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *PostServersServerIdPortsPortIdEnableParams, body PostServersServerIdPortsPortIdEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPortsPortIdEnableResponse, error) {
	rsp, err := c.PostServersServerIdPortsPortIdEnable(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPortsPortIdEnableResponse(rsp)
}

// GetServersServerIdPortsPortIdTrafficGraphWithResponse request returning *GetServersServerIdPortsPortIdTrafficGraphResponse
func (c *ClientWithResponses) GetServersServerIdPortsPortIdTrafficGraphWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *GetServersServerIdPortsPortIdTrafficGraphParams, reqEditors ...RequestEditorFn) (*GetServersServerIdPortsPortIdTrafficGraphResponse, error) {
	rsp, err := c.GetServersServerIdPortsPortIdTrafficGraph(ctx, serverId, portId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdPortsPortIdTrafficGraphResponse(rsp)
}

// PostServersServerIdPowerControlWithBodyWithResponse request with arbitrary body returning *PostServersServerIdPowerControlResponse
func (c *ClientWithResponses) PostServersServerIdPowerControlWithBodyWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServersServerIdPowerControlResponse, error) {
	rsp, err := c.PostServersServerIdPowerControlWithBody(ctx, serverId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPowerControlResponse(rsp)
}

func (c *ClientWithResponses) PostServersServerIdPowerControlWithResponse(ctx context.Context, serverId ServerId, params *PostServersServerIdPowerControlParams, body PostServersServerIdPowerControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServersServerIdPowerControlResponse, error) {
	rsp, err := c.PostServersServerIdPowerControl(ctx, serverId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServersServerIdPowerControlResponse(rsp)
}

// GetServersServerIdPowerStatusWithResponse request returning *GetServersServerIdPowerStatusResponse
func (c *ClientWithResponses) GetServersServerIdPowerStatusWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*GetServersServerIdPowerStatusResponse, error) {
	rsp, err := c.GetServersServerIdPowerStatus(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdPowerStatusResponse(rsp)
}

// GetServersServerIdRaidStatusWithResponse request returning *GetServersServerIdRaidStatusResponse
func (c *ClientWithResponses) GetServersServerIdRaidStatusWithResponse(ctx context.Context, serverId ServerId, params *GetServersServerIdRaidStatusParams, reqEditors ...RequestEditorFn) (*GetServersServerIdRaidStatusResponse, error) {
	rsp, err := c.GetServersServerIdRaidStatus(ctx, serverId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServersServerIdRaidStatusResponse(rsp)
}

// GetServicesWithResponse request returning *GetServicesResponse
func (c *ClientWithResponses) GetServicesWithResponse(ctx context.Context, params *GetServicesParams, reqEditors ...RequestEditorFn) (*GetServicesResponse, error) {
	rsp, err := c.GetServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesResponse(rsp)
}

// GetServicesServiceIdWithResponse request returning *GetServicesServiceIdResponse
func (c *ClientWithResponses) GetServicesServiceIdWithResponse(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*GetServicesServiceIdResponse, error) {
	rsp, err := c.GetServicesServiceId(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicesServiceIdResponse(rsp)
}

// PatchServicesServiceIdWithBodyWithResponse request with arbitrary body returning *PatchServicesServiceIdResponse
func (c *ClientWithResponses) PatchServicesServiceIdWithBodyWithResponse(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServicesServiceIdResponse, error) {
	rsp, err := c.PatchServicesServiceIdWithBody(ctx, serviceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesServiceIdResponse(rsp)
}

func (c *ClientWithResponses) PatchServicesServiceIdWithResponse(ctx context.Context, serviceId ServiceId, params *PatchServicesServiceIdParams, body PatchServicesServiceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServicesServiceIdResponse, error) {
	rsp, err := c.PatchServicesServiceId(ctx, serviceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServicesServiceIdResponse(rsp)
}

// ParseGetDedicatedSubnetsResponse parses an HTTP response from a GetDedicatedSubnetsWithResponse call
func ParseGetDedicatedSubnetsResponse(rsp *http.Response) (*GetDedicatedSubnetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDedicatedSubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DedicatedSubnets *[]DedicatedSubnet `json:"dedicated_subnets,omitempty"`
			Meta             *PaginateMeta      `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetDedicatedSubnetsDedicatedSubnetIdResponse parses an HTTP response from a GetDedicatedSubnetsDedicatedSubnetIdWithResponse call
func ParseGetDedicatedSubnetsDedicatedSubnetIdResponse(rsp *http.Response) (*GetDedicatedSubnetsDedicatedSubnetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDedicatedSubnetsDedicatedSubnetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DedicatedSubnet *DedicatedSubnet `json:"dedicated_subnet,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPrivateNetworksResponse parses an HTTP response from a GetPrivateNetworksWithResponse call
func ParseGetPrivateNetworksResponse(rsp *http.Response) (*GetPrivateNetworksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta            *PaginateMeta     `json:"meta,omitempty"`
			PrivateNetworks *[]PrivateNetwork `json:"private_networks,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetPrivateNetworksPrivateNetworkIdResponse parses an HTTP response from a GetPrivateNetworksPrivateNetworkIdWithResponse call
func ParseGetPrivateNetworksPrivateNetworkIdResponse(rsp *http.Response) (*GetPrivateNetworksPrivateNetworkIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPrivateNetworksPrivateNetworkIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PrivateNetwork *PrivateNetwork `json:"private_network,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersResponse parses an HTTP response from a GetServersWithResponse call
func ParseGetServersResponse(rsp *http.Response) (*GetServersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetServersResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdResponse parses an HTTP response from a GetServersServerIdWithResponse call
func ParseGetServersServerIdResponse(rsp *http.Response) (*GetServersServerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Server *Server `json:"server,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdOsImagesResponse parses an HTTP response from a GetServersServerIdOsImagesWithResponse call
func ParseGetServersServerIdOsImagesResponse(rsp *http.Response) (*GetServersServerIdOsImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdOsImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			OsImages *[]struct {
				// パーティション手動構成が可能か
				// (パーティション構成の指定が可能な場合に `true`)
				ManualPartition *bool `json:"manual_partition,omitempty"`

				// OSの名称
				Name *string `json:"name,omitempty"`

				// インストール実行時に指定するOSイメージ名
				OsImageId *string `json:"os_image_id,omitempty"`

				// インストール時にパスワード指定が必要か
				// (パスワード指定が必要な場合 `true`)
				RequirePassword *bool `json:"require_password,omitempty"`

				// OSインストール時に作成される管理ユーザー名
				SuperuserName *string `json:"superuser_name,omitempty"`
			} `json:"os_images,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostServersServerIdOsInstallResponse parses an HTTP response from a PostServersServerIdOsInstallWithResponse call
func ParsePostServersServerIdOsInstallResponse(rsp *http.Response) (*PostServersServerIdOsInstallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServersServerIdOsInstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdPortChannelsPortChannelIdResponse parses an HTTP response from a GetServersServerIdPortChannelsPortChannelIdWithResponse call
func ParseGetServersServerIdPortChannelsPortChannelIdResponse(rsp *http.Response) (*GetServersServerIdPortChannelsPortChannelIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdPortChannelsPortChannelIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェース ポートチャネル情報
			PortChannel *PortChannel `json:"port_channel,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse parses an HTTP response from a PostServersServerIdPortChannelsPortChannelIdConfigureBondingWithResponse call
func ParsePostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse(rsp *http.Response) (*PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServersServerIdPortChannelsPortChannelIdConfigureBondingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PortChannel *[]PortChannel `json:"port_channel,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/problem_details_400)
			ProblemDetails400 `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdPortsPortIdResponse parses an HTTP response from a GetServersServerIdPortsPortIdWithResponse call
func ParseGetServersServerIdPortsPortIdResponse(rsp *http.Response) (*GetServersServerIdPortsPortIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdPortsPortIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchServersServerIdPortsPortIdResponse parses an HTTP response from a PatchServersServerIdPortsPortIdWithResponse call
func ParsePatchServersServerIdPortsPortIdResponse(rsp *http.Response) (*PatchServersServerIdPortsPortIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServersServerIdPortsPortIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Port *[]InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostServersServerIdPortsPortIdAssignNetworkResponse parses an HTTP response from a PostServersServerIdPortsPortIdAssignNetworkWithResponse call
func ParsePostServersServerIdPortsPortIdAssignNetworkResponse(rsp *http.Response) (*PostServersServerIdPortsPortIdAssignNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServersServerIdPortsPortIdAssignNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/problem_details_400)
			ProblemDetails400 `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostServersServerIdPortsPortIdEnableResponse parses an HTTP response from a PostServersServerIdPortsPortIdEnableWithResponse call
func ParsePostServersServerIdPortsPortIdEnableResponse(rsp *http.Response) (*PostServersServerIdPortsPortIdEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServersServerIdPortsPortIdEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdPortsPortIdTrafficGraphResponse parses an HTTP response from a GetServersServerIdPortsPortIdTrafficGraphWithResponse call
func ParseGetServersServerIdPortsPortIdTrafficGraphResponse(rsp *http.Response) (*GetServersServerIdPortsPortIdTrafficGraphResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdPortsPortIdTrafficGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TrafficGraph *struct {
				// 受信方向トラフィック
				Receive *[]struct {
					// 取得時刻
					Timestamp *time.Time `json:"timestamp,omitempty"`

					// 1つ前のデータからの平均トラフィック(bps)
					Value *int `json:"value,omitempty"`
				} `json:"receive,omitempty"`

				// 送信方向トラフィック
				Transmit *[]struct {
					// 取得時刻
					Timestamp *time.Time `json:"timestamp,omitempty"`

					// 1つ前のデータからの平均トラフィック(bps)
					Value *int `json:"value,omitempty"`
				} `json:"transmit,omitempty"`
			} `json:"traffic_graph,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePostServersServerIdPowerControlResponse parses an HTTP response from a PostServersServerIdPowerControlWithResponse call
func ParsePostServersServerIdPowerControlResponse(rsp *http.Response) (*PostServersServerIdPowerControlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServersServerIdPowerControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdPowerStatusResponse parses an HTTP response from a GetServersServerIdPowerStatusWithResponse call
func ParseGetServersServerIdPowerStatusResponse(rsp *http.Response) (*GetServersServerIdPowerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdPowerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PowerStatus *ServerPowerStatus `json:"power_status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServersServerIdRaidStatusResponse parses an HTTP response from a GetServersServerIdRaidStatusWithResponse call
func ParseGetServersServerIdRaidStatusResponse(rsp *http.Response) (*GetServersServerIdRaidStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServersServerIdRaidStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RaidStatus *RaidStatus `json:"raid_status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetServicesResponse parses an HTTP response from a GetServicesWithResponse call
func ParseGetServicesResponse(rsp *http.Response) (*GetServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta     *PaginateMeta `json:"meta,omitempty"`
			Services *[]Service    `json:"services,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetServicesServiceIdResponse parses an HTTP response from a GetServicesServiceIdWithResponse call
func ParseGetServicesServiceIdResponse(rsp *http.Response) (*GetServicesServiceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicesServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Service *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParsePatchServicesServiceIdResponse parses an HTTP response from a PatchServicesServiceIdWithResponse call
func ParsePatchServicesServiceIdResponse(rsp *http.Response) (*PatchServicesServiceIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServicesServiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Service *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
