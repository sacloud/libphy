// Copyright 2021 The phy-go authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListDedicatedSubnets request
	ListDedicatedSubnets(ctx context.Context, params *ListDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadDedicatedSubnet request
	ReadDedicatedSubnet(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *ReadDedicatedSubnetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPrivateNetworks request
	ListPrivateNetworks(ctx context.Context, params *ListPrivateNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadPrivateNetwork request
	ReadPrivateNetwork(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServers request
	ListServers(ctx context.Context, params *ListServersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServer request
	ReadServer(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOSImages request
	ListOSImages(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OSInstall request with any body
	OSInstallWithBody(ctx context.Context, serverId ServerId, params *OSInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OSInstall(ctx context.Context, serverId ServerId, params *OSInstallParams, body OSInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServerPortChannel request
	ReadServerPortChannel(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetPortChannelBonding request with any body
	SetPortChannelBondingWithBody(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetPortChannelBonding(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, body SetPortChannelBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServerPort request
	ReadServerPort(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServerPort request with any body
	UpdateServerPortWithBody(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServerPort(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, body UpdateServerPortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetServerPortNetworkConnection request with any body
	SetServerPortNetworkConnectionWithBody(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetServerPortNetworkConnection(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, body SetServerPortNetworkConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetServerPortEnabled request with any body
	SetServerPortEnabledWithBody(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetServerPortEnabled(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, body SetServerPortEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServerTrafficByPort request
	ReadServerTrafficByPort(ctx context.Context, serverId ServerId, portId PortId, params *ReadServerTrafficByPortParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetServerPowerStatus request with any body
	SetServerPowerStatusWithBody(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetServerPowerStatus(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, body SetServerPowerStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServerPowerStatus request
	ReadServerPowerStatus(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadRAIDStatus request
	ReadRAIDStatus(ctx context.Context, serverId ServerId, params *ReadRAIDStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListServices request
	ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadService request
	ReadService(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateService request with any body
	UpdateServiceWithBody(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateService(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListDedicatedSubnets(ctx context.Context, params *ListDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDedicatedSubnetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadDedicatedSubnet(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *ReadDedicatedSubnetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadDedicatedSubnetRequest(c.Server, dedicatedSubnetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPrivateNetworks(ctx context.Context, params *ListPrivateNetworksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPrivateNetworksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadPrivateNetwork(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadPrivateNetworkRequest(c.Server, privateNetworkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServers(ctx context.Context, params *ListServersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServer(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServerRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOSImages(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOSImagesRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSInstallWithBody(ctx context.Context, serverId ServerId, params *OSInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSInstallRequestWithBody(c.Server, serverId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OSInstall(ctx context.Context, serverId ServerId, params *OSInstallParams, body OSInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOSInstallRequest(c.Server, serverId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServerPortChannel(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServerPortChannelRequest(c.Server, serverId, portChannelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPortChannelBondingWithBody(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPortChannelBondingRequestWithBody(c.Server, serverId, portChannelId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetPortChannelBonding(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, body SetPortChannelBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetPortChannelBondingRequest(c.Server, serverId, portChannelId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServerPort(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServerPortRequest(c.Server, serverId, portId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServerPortWithBody(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServerPortRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServerPort(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, body UpdateServerPortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServerPortRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPortNetworkConnectionWithBody(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPortNetworkConnectionRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPortNetworkConnection(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, body SetServerPortNetworkConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPortNetworkConnectionRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPortEnabledWithBody(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPortEnabledRequestWithBody(c.Server, serverId, portId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPortEnabled(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, body SetServerPortEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPortEnabledRequest(c.Server, serverId, portId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServerTrafficByPort(ctx context.Context, serverId ServerId, portId PortId, params *ReadServerTrafficByPortParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServerTrafficByPortRequest(c.Server, serverId, portId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPowerStatusWithBody(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPowerStatusRequestWithBody(c.Server, serverId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetServerPowerStatus(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, body SetServerPowerStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetServerPowerStatusRequest(c.Server, serverId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServerPowerStatus(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServerPowerStatusRequest(c.Server, serverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadRAIDStatus(ctx context.Context, serverId ServerId, params *ReadRAIDStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadRAIDStatusRequest(c.Server, serverId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListServices(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadService(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServiceRequest(c.Server, serviceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceWithBody(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequestWithBody(c.Server, serviceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateService(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceRequest(c.Server, serviceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListDedicatedSubnetsRequest generates requests for ListDedicatedSubnets
func NewListDedicatedSubnetsRequest(server string, params *ListDedicatedSubnetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dedicated_subnets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadDedicatedSubnetRequest generates requests for ReadDedicatedSubnet
func NewReadDedicatedSubnetRequest(server string, dedicatedSubnetId DedicatedSubnetId, params *ReadDedicatedSubnetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dedicated_subnet_id", runtime.ParamLocationPath, dedicatedSubnetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dedicated_subnets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Refresh != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPrivateNetworksRequest generates requests for ListPrivateNetworks
func NewListPrivateNetworksRequest(server string, params *ListPrivateNetworksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private_networks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadPrivateNetworkRequest generates requests for ReadPrivateNetwork
func NewReadPrivateNetworkRequest(server string, privateNetworkId PrivateNetworkId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "private_network_id", runtime.ParamLocationPath, privateNetworkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/private_networks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServersRequest generates requests for ListServers
func NewListServersRequest(server string, params *ListServersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PowerStatus != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "power_status", runtime.ParamLocationQuery, *params.PowerStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Internet != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "internet", runtime.ParamLocationQuery, *params.Internet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PrivateNetwork != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "private_network", runtime.ParamLocationQuery, *params.PrivateNetwork); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadServerRequest generates requests for ReadServer
func NewReadServerRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOSImagesRequest generates requests for ListOSImages
func NewListOSImagesRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/os_images/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOSInstallRequest calls the generic OSInstall builder with application/json body
func NewOSInstallRequest(server string, serverId ServerId, params *OSInstallParams, body OSInstallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOSInstallRequestWithBody(server, serverId, params, "application/json", bodyReader)
}

// NewOSInstallRequestWithBody generates requests for OSInstall with any type of body
func NewOSInstallRequestWithBody(server string, serverId ServerId, params *OSInstallParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/os_install/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewReadServerPortChannelRequest generates requests for ReadServerPortChannel
func NewReadServerPortChannelRequest(server string, serverId ServerId, portChannelId PortChannelId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_channel_id", runtime.ParamLocationPath, portChannelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/port_channels/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetPortChannelBondingRequest calls the generic SetPortChannelBonding builder with application/json body
func NewSetPortChannelBondingRequest(server string, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, body SetPortChannelBondingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetPortChannelBondingRequestWithBody(server, serverId, portChannelId, params, "application/json", bodyReader)
}

// NewSetPortChannelBondingRequestWithBody generates requests for SetPortChannelBonding with any type of body
func NewSetPortChannelBondingRequestWithBody(server string, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_channel_id", runtime.ParamLocationPath, portChannelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/port_channels/%s/configure_bonding/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewReadServerPortRequest generates requests for ReadServerPort
func NewReadServerPortRequest(server string, serverId ServerId, portId PortId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServerPortRequest calls the generic UpdateServerPort builder with application/json body
func NewUpdateServerPortRequest(server string, serverId ServerId, portId PortId, params *UpdateServerPortParams, body UpdateServerPortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServerPortRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewUpdateServerPortRequestWithBody generates requests for UpdateServerPort with any type of body
func NewUpdateServerPortRequestWithBody(server string, serverId ServerId, portId PortId, params *UpdateServerPortParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewSetServerPortNetworkConnectionRequest calls the generic SetServerPortNetworkConnection builder with application/json body
func NewSetServerPortNetworkConnectionRequest(server string, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, body SetServerPortNetworkConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetServerPortNetworkConnectionRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewSetServerPortNetworkConnectionRequestWithBody generates requests for SetServerPortNetworkConnection with any type of body
func NewSetServerPortNetworkConnectionRequestWithBody(server string, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/assign_network/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewSetServerPortEnabledRequest calls the generic SetServerPortEnabled builder with application/json body
func NewSetServerPortEnabledRequest(server string, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, body SetServerPortEnabledJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetServerPortEnabledRequestWithBody(server, serverId, portId, params, "application/json", bodyReader)
}

// NewSetServerPortEnabledRequestWithBody generates requests for SetServerPortEnabled with any type of body
func NewSetServerPortEnabledRequestWithBody(server string, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/enable/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewReadServerTrafficByPortRequest generates requests for ReadServerTrafficByPort
func NewReadServerTrafficByPortRequest(server string, serverId ServerId, portId PortId, params *ReadServerTrafficByPortParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "port_id", runtime.ParamLocationPath, portId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/ports/%s/traffic_graph/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Step != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step", runtime.ParamLocationQuery, *params.Step); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetServerPowerStatusRequest calls the generic SetServerPowerStatus builder with application/json body
func NewSetServerPowerStatusRequest(server string, serverId ServerId, params *SetServerPowerStatusParams, body SetServerPowerStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetServerPowerStatusRequestWithBody(server, serverId, params, "application/json", bodyReader)
}

// NewSetServerPowerStatusRequestWithBody generates requests for SetServerPowerStatus with any type of body
func NewSetServerPowerStatusRequestWithBody(server string, serverId ServerId, params *SetServerPowerStatusParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/power_control/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

// NewReadServerPowerStatusRequest generates requests for ReadServerPowerStatus
func NewReadServerPowerStatusRequest(server string, serverId ServerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/power_status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadRAIDStatusRequest generates requests for ReadRAIDStatus
func NewReadRAIDStatusRequest(server string, serverId ServerId, params *ReadRAIDStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/servers/%s/raid_status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Refresh != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListServicesRequest generates requests for ListServices
func NewListServicesRequest(server string, params *ListServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ProductCategory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_category", runtime.ParamLocationQuery, *params.ProductCategory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FreeWord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free_word", runtime.ParamLocationQuery, *params.FreeWord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadServiceRequest generates requests for ReadService
func NewReadServiceRequest(server string, serviceId ServiceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceRequest calls the generic UpdateService builder with application/json body
func NewUpdateServiceRequest(server string, serviceId ServiceId, params *UpdateServiceParams, body UpdateServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceRequestWithBody(server, serviceId, params, "application/json", bodyReader)
}

// NewUpdateServiceRequestWithBody generates requests for UpdateService with any type of body
func NewUpdateServiceRequestWithBody(server string, serviceId ServiceId, params *UpdateServiceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_id", runtime.ParamLocationPath, serviceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/services/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Requested-With", runtime.ParamLocationHeader, params.XRequestedWith)
	if err != nil {
		return nil, err
	}

	req.Header.Set("X-Requested-With", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListDedicatedSubnets request
	ListDedicatedSubnetsWithResponse(ctx context.Context, params *ListDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*ListDedicatedSubnetsResponse, error)

	// ReadDedicatedSubnet request
	ReadDedicatedSubnetWithResponse(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *ReadDedicatedSubnetParams, reqEditors ...RequestEditorFn) (*ReadDedicatedSubnetResponse, error)

	// ListPrivateNetworks request
	ListPrivateNetworksWithResponse(ctx context.Context, params *ListPrivateNetworksParams, reqEditors ...RequestEditorFn) (*ListPrivateNetworksResponse, error)

	// ReadPrivateNetwork request
	ReadPrivateNetworkWithResponse(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*ReadPrivateNetworkResponse, error)

	// ListServers request
	ListServersWithResponse(ctx context.Context, params *ListServersParams, reqEditors ...RequestEditorFn) (*ListServersResponse, error)

	// ReadServer request
	ReadServerWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ReadServerResponse, error)

	// ListOSImages request
	ListOSImagesWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ListOSImagesResponse, error)

	// OSInstall request with any body
	OSInstallWithBodyWithResponse(ctx context.Context, serverId ServerId, params *OSInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OSInstallResponse, error)

	OSInstallWithResponse(ctx context.Context, serverId ServerId, params *OSInstallParams, body OSInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*OSInstallResponse, error)

	// ReadServerPortChannel request
	ReadServerPortChannelWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*ReadServerPortChannelResponse, error)

	// SetPortChannelBonding request with any body
	SetPortChannelBondingWithBodyWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPortChannelBondingResponse, error)

	SetPortChannelBondingWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, body SetPortChannelBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPortChannelBondingResponse, error)

	// ReadServerPort request
	ReadServerPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*ReadServerPortResponse, error)

	// UpdateServerPort request with any body
	UpdateServerPortWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServerPortResponse, error)

	UpdateServerPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, body UpdateServerPortJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServerPortResponse, error)

	// SetServerPortNetworkConnection request with any body
	SetServerPortNetworkConnectionWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPortNetworkConnectionResponse, error)

	SetServerPortNetworkConnectionWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, body SetServerPortNetworkConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPortNetworkConnectionResponse, error)

	// SetServerPortEnabled request with any body
	SetServerPortEnabledWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPortEnabledResponse, error)

	SetServerPortEnabledWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, body SetServerPortEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPortEnabledResponse, error)

	// ReadServerTrafficByPort request
	ReadServerTrafficByPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *ReadServerTrafficByPortParams, reqEditors ...RequestEditorFn) (*ReadServerTrafficByPortResponse, error)

	// SetServerPowerStatus request with any body
	SetServerPowerStatusWithBodyWithResponse(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPowerStatusResponse, error)

	SetServerPowerStatusWithResponse(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, body SetServerPowerStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPowerStatusResponse, error)

	// ReadServerPowerStatus request
	ReadServerPowerStatusWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ReadServerPowerStatusResponse, error)

	// ReadRAIDStatus request
	ReadRAIDStatusWithResponse(ctx context.Context, serverId ServerId, params *ReadRAIDStatusParams, reqEditors ...RequestEditorFn) (*ReadRAIDStatusResponse, error)

	// ListServices request
	ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error)

	// ReadService request
	ReadServiceWithResponse(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*ReadServiceResponse, error)

	// UpdateService request with any body
	UpdateServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)

	UpdateServiceWithResponse(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error)
}

type ListDedicatedSubnetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DedicatedSubnets
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ListDedicatedSubnetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDedicatedSubnetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadDedicatedSubnetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DedicatedSubnet *DedicatedSubnet `json:"dedicated_subnet,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r ReadDedicatedSubnetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadDedicatedSubnetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPrivateNetworksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateNetworks
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ListPrivateNetworksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPrivateNetworksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadPrivateNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PrivateNetwork *PrivateNetwork `json:"private_network,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ReadPrivateNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadPrivateNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Servers
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ListServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Server *Server `json:"server,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ReadServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOSImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		OsImages *[]OsImage `json:"os_images,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ListOSImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOSImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OSInstallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON409      *ProblemDetails409
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r OSInstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OSInstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServerPortChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェース ポートチャネル情報
		PortChannel *PortChannel `json:"port_channel,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r ReadServerPortChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServerPortChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetPortChannelBondingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PortChannel *[]PortChannel `json:"port_channel,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/problem_details_400)
		ProblemDetails400 `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r SetPortChannelBondingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetPortChannelBondingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServerPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r ReadServerPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServerPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServerPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Port *[]InterfacePort `json:"port,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r UpdateServerPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServerPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetServerPortNetworkConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON400 *struct {
		// Embedded struct due to allOf(#/components/schemas/problem_details_400)
		ProblemDetails400 `yaml:",inline"`
		// Embedded fields due to inline allOf schema
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r SetServerPortNetworkConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetServerPortNetworkConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetServerPortEnabledResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ネットワークインターフェースの接続ポート情報
		Port *InterfacePort `json:"port,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON409 *ProblemDetails409
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r SetServerPortEnabledResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetServerPortEnabledResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServerTrafficByPortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrafficGraph
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ReadServerTrafficByPortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServerTrafficByPortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetServerPowerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ProblemDetails400
	JSON401      *ProblemDetails401
	JSON404      *ProblemDetails404
	JSON429      *ProblemDetails429
	JSON503      *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r SetServerPowerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetServerPowerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServerPowerStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		PowerStatus *ServerPowerStatus `json:"power_status,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r ReadServerPowerStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServerPowerStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadRAIDStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		RaidStatus *RaidStatus `json:"raid_status,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
	JSON503 *ProblemDetails503
}

// Status returns HTTPResponse.Status
func (r ReadRAIDStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadRAIDStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Services
	JSON401      *ProblemDetails401
	JSON429      *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ListServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Service *Service `json:"service,omitempty"`
	}
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r ReadServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Service *Service `json:"service,omitempty"`
	}
	JSON400 *ProblemDetails400
	JSON401 *ProblemDetails401
	JSON404 *ProblemDetails404
	JSON429 *ProblemDetails429
}

// Status returns HTTPResponse.Status
func (r UpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListDedicatedSubnetsWithResponse request returning *ListDedicatedSubnetsResponse
func (c *ClientWithResponses) ListDedicatedSubnetsWithResponse(ctx context.Context, params *ListDedicatedSubnetsParams, reqEditors ...RequestEditorFn) (*ListDedicatedSubnetsResponse, error) {
	rsp, err := c.ListDedicatedSubnets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDedicatedSubnetsResponse(rsp)
}

// ReadDedicatedSubnetWithResponse request returning *ReadDedicatedSubnetResponse
func (c *ClientWithResponses) ReadDedicatedSubnetWithResponse(ctx context.Context, dedicatedSubnetId DedicatedSubnetId, params *ReadDedicatedSubnetParams, reqEditors ...RequestEditorFn) (*ReadDedicatedSubnetResponse, error) {
	rsp, err := c.ReadDedicatedSubnet(ctx, dedicatedSubnetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadDedicatedSubnetResponse(rsp)
}

// ListPrivateNetworksWithResponse request returning *ListPrivateNetworksResponse
func (c *ClientWithResponses) ListPrivateNetworksWithResponse(ctx context.Context, params *ListPrivateNetworksParams, reqEditors ...RequestEditorFn) (*ListPrivateNetworksResponse, error) {
	rsp, err := c.ListPrivateNetworks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPrivateNetworksResponse(rsp)
}

// ReadPrivateNetworkWithResponse request returning *ReadPrivateNetworkResponse
func (c *ClientWithResponses) ReadPrivateNetworkWithResponse(ctx context.Context, privateNetworkId PrivateNetworkId, reqEditors ...RequestEditorFn) (*ReadPrivateNetworkResponse, error) {
	rsp, err := c.ReadPrivateNetwork(ctx, privateNetworkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadPrivateNetworkResponse(rsp)
}

// ListServersWithResponse request returning *ListServersResponse
func (c *ClientWithResponses) ListServersWithResponse(ctx context.Context, params *ListServersParams, reqEditors ...RequestEditorFn) (*ListServersResponse, error) {
	rsp, err := c.ListServers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServersResponse(rsp)
}

// ReadServerWithResponse request returning *ReadServerResponse
func (c *ClientWithResponses) ReadServerWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ReadServerResponse, error) {
	rsp, err := c.ReadServer(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServerResponse(rsp)
}

// ListOSImagesWithResponse request returning *ListOSImagesResponse
func (c *ClientWithResponses) ListOSImagesWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ListOSImagesResponse, error) {
	rsp, err := c.ListOSImages(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOSImagesResponse(rsp)
}

// OSInstallWithBodyWithResponse request with arbitrary body returning *OSInstallResponse
func (c *ClientWithResponses) OSInstallWithBodyWithResponse(ctx context.Context, serverId ServerId, params *OSInstallParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OSInstallResponse, error) {
	rsp, err := c.OSInstallWithBody(ctx, serverId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSInstallResponse(rsp)
}

func (c *ClientWithResponses) OSInstallWithResponse(ctx context.Context, serverId ServerId, params *OSInstallParams, body OSInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*OSInstallResponse, error) {
	rsp, err := c.OSInstall(ctx, serverId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOSInstallResponse(rsp)
}

// ReadServerPortChannelWithResponse request returning *ReadServerPortChannelResponse
func (c *ClientWithResponses) ReadServerPortChannelWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, reqEditors ...RequestEditorFn) (*ReadServerPortChannelResponse, error) {
	rsp, err := c.ReadServerPortChannel(ctx, serverId, portChannelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServerPortChannelResponse(rsp)
}

// SetPortChannelBondingWithBodyWithResponse request with arbitrary body returning *SetPortChannelBondingResponse
func (c *ClientWithResponses) SetPortChannelBondingWithBodyWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetPortChannelBondingResponse, error) {
	rsp, err := c.SetPortChannelBondingWithBody(ctx, serverId, portChannelId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPortChannelBondingResponse(rsp)
}

func (c *ClientWithResponses) SetPortChannelBondingWithResponse(ctx context.Context, serverId ServerId, portChannelId PortChannelId, params *SetPortChannelBondingParams, body SetPortChannelBondingJSONRequestBody, reqEditors ...RequestEditorFn) (*SetPortChannelBondingResponse, error) {
	rsp, err := c.SetPortChannelBonding(ctx, serverId, portChannelId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetPortChannelBondingResponse(rsp)
}

// ReadServerPortWithResponse request returning *ReadServerPortResponse
func (c *ClientWithResponses) ReadServerPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, reqEditors ...RequestEditorFn) (*ReadServerPortResponse, error) {
	rsp, err := c.ReadServerPort(ctx, serverId, portId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServerPortResponse(rsp)
}

// UpdateServerPortWithBodyWithResponse request with arbitrary body returning *UpdateServerPortResponse
func (c *ClientWithResponses) UpdateServerPortWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServerPortResponse, error) {
	rsp, err := c.UpdateServerPortWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServerPortResponse(rsp)
}

func (c *ClientWithResponses) UpdateServerPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *UpdateServerPortParams, body UpdateServerPortJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServerPortResponse, error) {
	rsp, err := c.UpdateServerPort(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServerPortResponse(rsp)
}

// SetServerPortNetworkConnectionWithBodyWithResponse request with arbitrary body returning *SetServerPortNetworkConnectionResponse
func (c *ClientWithResponses) SetServerPortNetworkConnectionWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPortNetworkConnectionResponse, error) {
	rsp, err := c.SetServerPortNetworkConnectionWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPortNetworkConnectionResponse(rsp)
}

func (c *ClientWithResponses) SetServerPortNetworkConnectionWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortNetworkConnectionParams, body SetServerPortNetworkConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPortNetworkConnectionResponse, error) {
	rsp, err := c.SetServerPortNetworkConnection(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPortNetworkConnectionResponse(rsp)
}

// SetServerPortEnabledWithBodyWithResponse request with arbitrary body returning *SetServerPortEnabledResponse
func (c *ClientWithResponses) SetServerPortEnabledWithBodyWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPortEnabledResponse, error) {
	rsp, err := c.SetServerPortEnabledWithBody(ctx, serverId, portId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPortEnabledResponse(rsp)
}

func (c *ClientWithResponses) SetServerPortEnabledWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *SetServerPortEnabledParams, body SetServerPortEnabledJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPortEnabledResponse, error) {
	rsp, err := c.SetServerPortEnabled(ctx, serverId, portId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPortEnabledResponse(rsp)
}

// ReadServerTrafficByPortWithResponse request returning *ReadServerTrafficByPortResponse
func (c *ClientWithResponses) ReadServerTrafficByPortWithResponse(ctx context.Context, serverId ServerId, portId PortId, params *ReadServerTrafficByPortParams, reqEditors ...RequestEditorFn) (*ReadServerTrafficByPortResponse, error) {
	rsp, err := c.ReadServerTrafficByPort(ctx, serverId, portId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServerTrafficByPortResponse(rsp)
}

// SetServerPowerStatusWithBodyWithResponse request with arbitrary body returning *SetServerPowerStatusResponse
func (c *ClientWithResponses) SetServerPowerStatusWithBodyWithResponse(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetServerPowerStatusResponse, error) {
	rsp, err := c.SetServerPowerStatusWithBody(ctx, serverId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPowerStatusResponse(rsp)
}

func (c *ClientWithResponses) SetServerPowerStatusWithResponse(ctx context.Context, serverId ServerId, params *SetServerPowerStatusParams, body SetServerPowerStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*SetServerPowerStatusResponse, error) {
	rsp, err := c.SetServerPowerStatus(ctx, serverId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetServerPowerStatusResponse(rsp)
}

// ReadServerPowerStatusWithResponse request returning *ReadServerPowerStatusResponse
func (c *ClientWithResponses) ReadServerPowerStatusWithResponse(ctx context.Context, serverId ServerId, reqEditors ...RequestEditorFn) (*ReadServerPowerStatusResponse, error) {
	rsp, err := c.ReadServerPowerStatus(ctx, serverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServerPowerStatusResponse(rsp)
}

// ReadRAIDStatusWithResponse request returning *ReadRAIDStatusResponse
func (c *ClientWithResponses) ReadRAIDStatusWithResponse(ctx context.Context, serverId ServerId, params *ReadRAIDStatusParams, reqEditors ...RequestEditorFn) (*ReadRAIDStatusResponse, error) {
	rsp, err := c.ReadRAIDStatus(ctx, serverId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadRAIDStatusResponse(rsp)
}

// ListServicesWithResponse request returning *ListServicesResponse
func (c *ClientWithResponses) ListServicesWithResponse(ctx context.Context, params *ListServicesParams, reqEditors ...RequestEditorFn) (*ListServicesResponse, error) {
	rsp, err := c.ListServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListServicesResponse(rsp)
}

// ReadServiceWithResponse request returning *ReadServiceResponse
func (c *ClientWithResponses) ReadServiceWithResponse(ctx context.Context, serviceId ServiceId, reqEditors ...RequestEditorFn) (*ReadServiceResponse, error) {
	rsp, err := c.ReadService(ctx, serviceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServiceResponse(rsp)
}

// UpdateServiceWithBodyWithResponse request with arbitrary body returning *UpdateServiceResponse
func (c *ClientWithResponses) UpdateServiceWithBodyWithResponse(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateServiceWithBody(ctx, serviceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceWithResponse(ctx context.Context, serviceId ServiceId, params *UpdateServiceParams, body UpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceResponse, error) {
	rsp, err := c.UpdateService(ctx, serviceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceResponse(rsp)
}

// ParseListDedicatedSubnetsResponse parses an HTTP response from a ListDedicatedSubnetsWithResponse call
func ParseListDedicatedSubnetsResponse(rsp *http.Response) (*ListDedicatedSubnetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDedicatedSubnetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DedicatedSubnets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadDedicatedSubnetResponse parses an HTTP response from a ReadDedicatedSubnetWithResponse call
func ParseReadDedicatedSubnetResponse(rsp *http.Response) (*ReadDedicatedSubnetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadDedicatedSubnetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DedicatedSubnet *DedicatedSubnet `json:"dedicated_subnet,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListPrivateNetworksResponse parses an HTTP response from a ListPrivateNetworksWithResponse call
func ParseListPrivateNetworksResponse(rsp *http.Response) (*ListPrivateNetworksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPrivateNetworksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadPrivateNetworkResponse parses an HTTP response from a ReadPrivateNetworkWithResponse call
func ParseReadPrivateNetworkResponse(rsp *http.Response) (*ReadPrivateNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadPrivateNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PrivateNetwork *PrivateNetwork `json:"private_network,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseListServersResponse parses an HTTP response from a ListServersWithResponse call
func ParseListServersResponse(rsp *http.Response) (*ListServersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Servers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadServerResponse parses an HTTP response from a ReadServerWithResponse call
func ParseReadServerResponse(rsp *http.Response) (*ReadServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Server *Server `json:"server,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseListOSImagesResponse parses an HTTP response from a ListOSImagesWithResponse call
func ParseListOSImagesResponse(rsp *http.Response) (*ListOSImagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOSImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			OsImages *[]OsImage `json:"os_images,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseOSInstallResponse parses an HTTP response from a OSInstallWithResponse call
func ParseOSInstallResponse(rsp *http.Response) (*OSInstallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OSInstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadServerPortChannelResponse parses an HTTP response from a ReadServerPortChannelWithResponse call
func ParseReadServerPortChannelResponse(rsp *http.Response) (*ReadServerPortChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServerPortChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェース ポートチャネル情報
			PortChannel *PortChannel `json:"port_channel,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseSetPortChannelBondingResponse parses an HTTP response from a SetPortChannelBondingWithResponse call
func ParseSetPortChannelBondingResponse(rsp *http.Response) (*SetPortChannelBondingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetPortChannelBondingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PortChannel *[]PortChannel `json:"port_channel,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/problem_details_400)
			ProblemDetails400 `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadServerPortResponse parses an HTTP response from a ReadServerPortWithResponse call
func ParseReadServerPortResponse(rsp *http.Response) (*ReadServerPortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServerPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseUpdateServerPortResponse parses an HTTP response from a UpdateServerPortWithResponse call
func ParseUpdateServerPortResponse(rsp *http.Response) (*UpdateServerPortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServerPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Port *[]InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSetServerPortNetworkConnectionResponse parses an HTTP response from a SetServerPortNetworkConnectionWithResponse call
func ParseSetServerPortNetworkConnectionResponse(rsp *http.Response) (*SetServerPortNetworkConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetServerPortNetworkConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/problem_details_400)
			ProblemDetails400 `yaml:",inline"`
			// Embedded fields due to inline allOf schema
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSetServerPortEnabledResponse parses an HTTP response from a SetServerPortEnabledWithResponse call
func ParseSetServerPortEnabledResponse(rsp *http.Response) (*SetServerPortEnabledResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetServerPortEnabledResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ネットワークインターフェースの接続ポート情報
			Port *InterfacePort `json:"port,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadServerTrafficByPortResponse parses an HTTP response from a ReadServerTrafficByPortWithResponse call
func ParseReadServerTrafficByPortResponse(rsp *http.Response) (*ReadServerTrafficByPortResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServerTrafficByPortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrafficGraph
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseSetServerPowerStatusResponse parses an HTTP response from a SetServerPowerStatusWithResponse call
func ParseSetServerPowerStatusResponse(rsp *http.Response) (*SetServerPowerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetServerPowerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseReadServerPowerStatusResponse parses an HTTP response from a ReadServerPowerStatusWithResponse call
func ParseReadServerPowerStatusResponse(rsp *http.Response) (*ReadServerPowerStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServerPowerStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			PowerStatus *ServerPowerStatus `json:"power_status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseReadRAIDStatusResponse parses an HTTP response from a ReadRAIDStatusWithResponse call
func ParseReadRAIDStatusResponse(rsp *http.Response) (*ReadRAIDStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadRAIDStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			RaidStatus *RaidStatus `json:"raid_status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ProblemDetails503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseListServicesResponse parses an HTTP response from a ListServicesWithResponse call
func ParseListServicesResponse(rsp *http.Response) (*ListServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Services
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseReadServiceResponse parses an HTTP response from a ReadServiceWithResponse call
func ParseReadServiceResponse(rsp *http.Response) (*ReadServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Service *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseUpdateServiceResponse parses an HTTP response from a UpdateServiceWithResponse call
func ParseUpdateServiceResponse(rsp *http.Response) (*UpdateServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Service *Service `json:"service,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails429
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
