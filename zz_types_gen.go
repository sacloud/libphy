// Copyright 2021 The libphy authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Package phy provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package phy

import (
	"encoding/json"
	"fmt"
	"time"
)

const (
	Account_api_keyScopes = "account_api_key.Scopes"
)

// Defines values for DedicatedSubnetConfigStatus.
const (
	DedicatedSubnetConfigStatusAdministrativeLock DedicatedSubnetConfigStatus = "administrative_lock"

	DedicatedSubnetConfigStatusConfigureFw DedicatedSubnetConfigStatus = "configure_fw"

	DedicatedSubnetConfigStatusConfigureLb DedicatedSubnetConfigStatus = "configure_lb"

	DedicatedSubnetConfigStatusEnableIpv6 DedicatedSubnetConfigStatus = "enable_ipv6"

	DedicatedSubnetConfigStatusOperational DedicatedSubnetConfigStatus = "operational"
)

// Defines values for DedicatedSubnetIpv6SpecialUseAddressesType.
const (
	DedicatedSubnetIpv6SpecialUseAddressesTypeGateway DedicatedSubnetIpv6SpecialUseAddressesType = "gateway"

	DedicatedSubnetIpv6SpecialUseAddressesTypeGatewayReal DedicatedSubnetIpv6SpecialUseAddressesType = "gateway_real"
)

// Defines values for InterfacePortInternetSubnetType.
const (
	InterfacePortInternetSubnetTypeCommonSubnet InterfacePortInternetSubnetType = "common_subnet"

	InterfacePortInternetSubnetTypeDedicatedSubnet InterfacePortInternetSubnetType = "dedicated_subnet"
)

// Defines values for InterfacePortMode.
const (
	InterfacePortModeAccess InterfacePortMode = "access"

	InterfacePortModeTrunk InterfacePortMode = "trunk"
)

// Defines values for IpamType.
const (
	IpamTypeGateway IpamType = "gateway"

	IpamTypeGatewayReal IpamType = "gateway_real"

	IpamTypeLoadBalancer IpamType = "load_balancer"

	IpamTypeServer IpamType = "server"

	IpamTypeVoid IpamType = "void"
)

// Defines values for PortChannelBondingType.
const (
	PortChannelBondingTypeLacp PortChannelBondingType = "lacp"

	PortChannelBondingTypeSingle PortChannelBondingType = "single"

	PortChannelBondingTypeStatic PortChannelBondingType = "static"
)

// Defines values for PortChannelLinkSpeedType.
const (
	PortChannelLinkSpeedTypeN10gbe PortChannelLinkSpeedType = "10gbe"

	PortChannelLinkSpeedTypeN1gbe PortChannelLinkSpeedType = "1gbe"
)

// Defines values for ProblemDetails400Title.
const (
	ProblemDetails400TitleInvalid ProblemDetails400Title = "invalid"

	ProblemDetails400TitleParseError ProblemDetails400Title = "parse_error"
)

// Defines values for ProblemDetails401ErrorCode.
const (
	ProblemDetails401ErrorCodeUnauthorized ProblemDetails401ErrorCode = "unauthorized"
)

// Defines values for ProblemDetails404Title.
const (
	ProblemDetails404TitleNotFound ProblemDetails404Title = "not_found"
)

// Defines values for ProblemDetails409Title.
const (
	ProblemDetails409TitleConflict ProblemDetails409Title = "conflict"
)

// Defines values for ProblemDetails429Title.
const (
	ProblemDetails429TitleThrottled ProblemDetails429Title = "throttled"
)

// Defines values for ProblemDetails503Title.
const (
	ProblemDetails503TitleTemporaryUnavailable ProblemDetails503Title = "temporary_unavailable"
)

// Defines values for RaidStatusLogicalVolumesStatus.
const (
	RaidStatusLogicalVolumesStatusDegraded RaidStatusLogicalVolumesStatus = "degraded"

	RaidStatusLogicalVolumesStatusFailed RaidStatusLogicalVolumesStatus = "failed"

	RaidStatusLogicalVolumesStatusOk RaidStatusLogicalVolumesStatus = "ok"

	RaidStatusLogicalVolumesStatusRebuilding RaidStatusLogicalVolumesStatus = "rebuilding"
)

// Defines values for RaidStatusOverallStatus.
const (
	RaidStatusOverallStatusDegraded RaidStatusOverallStatus = "degraded"

	RaidStatusOverallStatusFailed RaidStatusOverallStatus = "failed"

	RaidStatusOverallStatusOk RaidStatusOverallStatus = "ok"

	RaidStatusOverallStatusRebuilding RaidStatusOverallStatus = "rebuilding"
)

// Defines values for RaidStatusPhysicalDevicesStatus.
const (
	RaidStatusPhysicalDevicesStatusFailed RaidStatusPhysicalDevicesStatus = "failed"

	RaidStatusPhysicalDevicesStatusOk RaidStatusPhysicalDevicesStatus = "ok"
)

// Defines values for ServerCachedPowerStatusStatus.
const (
	ServerCachedPowerStatusStatusOff ServerCachedPowerStatusStatus = "off"

	ServerCachedPowerStatusStatusOn ServerCachedPowerStatusStatus = "on"
)

// Defines values for ServerIpv4Type.
const (
	ServerIpv4TypeCommonIpAddress ServerIpv4Type = "common_ip_address"

	ServerIpv4TypeDedicatedIpAddress ServerIpv4Type = "dedicated_ip_address"
)

// Defines values for ServerLockStatus.
const (
	ServerLockStatusAdministrativeLock ServerLockStatus = "administrative_lock"

	ServerLockStatusConfigureRaid ServerLockStatus = "configure_raid"

	ServerLockStatusOsInstall ServerLockStatus = "os_install"
)

// Defines values for ServerSpecStoragesBusType.
const (
	ServerSpecStoragesBusTypeNvme ServerSpecStoragesBusType = "nvme"

	ServerSpecStoragesBusTypeSas ServerSpecStoragesBusType = "sas"

	ServerSpecStoragesBusTypeSata ServerSpecStoragesBusType = "sata"
)

// Defines values for ServerSpecStoragesMediaType.
const (
	ServerSpecStoragesMediaTypeFlashMemory ServerSpecStoragesMediaType = "flash_memory"

	ServerSpecStoragesMediaTypeHdd ServerSpecStoragesMediaType = "hdd"

	ServerSpecStoragesMediaTypeSsd ServerSpecStoragesMediaType = "ssd"
)

// Defines values for ServerPowerStatusStatus.
const (
	ServerPowerStatusStatusOff ServerPowerStatusStatus = "off"

	ServerPowerStatusStatusOn ServerPowerStatusStatus = "on"
)

// Defines values for ServiceOptionPlansOptionClass.
const (
	ServiceOptionPlansOptionClassAdditionalNvmeStorage1 ServiceOptionPlansOptionClass = "additional_nvme_storage1"

	ServiceOptionPlansOptionClassAdditionalNvmeStorage2 ServiceOptionPlansOptionClass = "additional_nvme_storage2"

	ServiceOptionPlansOptionClassAdditionalStorage1 ServiceOptionPlansOptionClass = "additional_storage1"

	ServiceOptionPlansOptionClassAdditionalStorage2 ServiceOptionPlansOptionClass = "additional_storage2"

	ServiceOptionPlansOptionClassAdditionalStorage3 ServiceOptionPlansOptionClass = "additional_storage3"

	ServiceOptionPlansOptionClassGlobalBandwidth ServiceOptionPlansOptionClass = "global_bandwidth"

	ServiceOptionPlansOptionClassLocalBandwidth ServiceOptionPlansOptionClass = "local_bandwidth"

	ServiceOptionPlansOptionClassOs ServiceOptionPlansOptionClass = "os"

	ServiceOptionPlansOptionClassUpgradeMemory ServiceOptionPlansOptionClass = "upgrade_memory"

	ServiceOptionPlansOptionClassUpgradeStorage ServiceOptionPlansOptionClass = "upgrade_storage"
)

// Defines values for ServiceProductCategory.
const (
	ServiceProductCategoryDedicatedSubnet ServiceProductCategory = "dedicated_subnet"

	ServiceProductCategoryFirewall ServiceProductCategory = "firewall"

	ServiceProductCategoryLoadBalancer ServiceProductCategory = "load_balancer"

	ServiceProductCategoryPrivateNetwork ServiceProductCategory = "private_network"

	ServiceProductCategoryServer ServiceProductCategory = "server"
)

// Defines values for HeaderRequestedWith.
const (
	XMLHttpRequest HeaderRequestedWith = "XMLHttpRequest"
)

// DedicatedSubnet defines model for dedicated_subnet.
type DedicatedSubnet struct {
	// 設定変更によるロック状態
	// `operational` 以外の状態では各種設定変更は不可
	//
	// * `operational` - 操作可能
	// * `configure_lb` - LBを設定中
	// * `configure_fw` - FWを設定中
	// * `enable_ipv6` - IPv6設定中
	// * `administrative_lock` - 機器交換などの作業を行っている
	ConfigStatus *DedicatedSubnetConfigStatus `json:"config_status,omitempty"`

	// 専用グローバルネットワークのサービスコード
	DedicatedSubnetId *string `json:"dedicated_subnet_id,omitempty"`

	// 割り当て済みファイアウォール(利用していない場合は`null`)
	Firewall *struct {
		// ファイアウォールのサービスコード
		FirewallId *string `json:"firewall_id,omitempty"`

		// ファイアウォールの名称
		Nickname *string `json:"nickname,omitempty"`
	} `json:"firewall"`
	Ipv4 *struct {
		// ブロードキャストアドレス
		BroadcastAddress *string `json:"broadcast_address,omitempty"`

		// ゲートウェイアドレス
		GatewayAddress *string `json:"gateway_address,omitempty"`

		// ネットワークアドレス
		NetworkAddress *string `json:"network_address,omitempty"`

		// ネットワーク長
		PrefixLength *int `json:"prefix_length,omitempty"`

		// 特別な用途で割り当て済みのIPアドレスのリスト
		SpecialUseAddresses *[]Ipam `json:"special_use_addresses,omitempty"`
	} `json:"ipv4,omitempty"`
	Ipv6 *struct {
		// ブロードキャストアドレス
		BroadcastAddress *string `json:"broadcast_address,omitempty"`

		// IPv6が有効になっているか
		Enabled *bool `json:"enabled,omitempty"`

		// ゲートウェイアドレス
		GatewayAddress *string `json:"gateway_address,omitempty"`

		// ネットワークIPアドレス
		NetworkAddress *string `json:"network_address,omitempty"`

		// ネットワーク長
		PrefixLength *int `json:"prefix_length,omitempty"`

		// 特別な用途で割り当て済みのIPアドレスのリスト
		SpecialUseAddresses *[]struct {
			IpAddress *string `json:"ip_address,omitempty"`

			// 割り当て用途分類
			//
			// * `gateway` - ゲートウェイアドレス
			// * `gateway_real` - ゲートウェイ機器実機
			Type *DedicatedSubnetIpv6SpecialUseAddressesType `json:"type,omitempty"`
		} `json:"special_use_addresses,omitempty"`
	} `json:"ipv6,omitempty"`

	// 割り当て済みロードバランサー(利用していない場合は`null`)
	LoadBalancer *struct {
		// ロードバランサーのサービスコード
		LoadBalancerId *string `json:"load_balancer_id"`

		// ロードバランサーの名称
		Nickname *string `json:"nickname,omitempty"`
	} `json:"load_balancer"`

	// 割り当て済みサーバー数
	ServerCount *int `json:"server_count,omitempty"`

	// サービス情報
	Service *ServiceQuiet `json:"service,omitempty"`
	Zone    *struct {
		// 地域名
		Region *string `json:"region,omitempty"`

		// ネットワークゾーンID
		ZoneId *int `json:"zone_id,omitempty"`
	} `json:"zone,omitempty"`
}

// 設定変更によるロック状態
// `operational` 以外の状態では各種設定変更は不可
//
// * `operational` - 操作可能
// * `configure_lb` - LBを設定中
// * `configure_fw` - FWを設定中
// * `enable_ipv6` - IPv6設定中
// * `administrative_lock` - 機器交換などの作業を行っている
type DedicatedSubnetConfigStatus string

// 割り当て用途分類
//
// * `gateway` - ゲートウェイアドレス
// * `gateway_real` - ゲートウェイ機器実機
type DedicatedSubnetIpv6SpecialUseAddressesType string

// ネットワークインターフェースの接続ポート情報
type InterfacePort struct {
	// ポート有効状態(通信が有効になっている場合 `true`)
	Enabled *bool `json:"enabled,omitempty"`

	// グローバル側の帯域幅(Mbps)
	// ボンディングされている場合は合計値
	GlobalBandwidthMbps *int `json:"global_bandwidth_mbps"`

	// グローバルネットワーク情報
	// このポートにインターネット接続が割り当てられていない場合は`null`
	Internet *struct {
		// 専用グローバルネットワーク情報(共用グローバルネットワーク割り当て時は`null`)
		DedicatedSubnet *struct {
			// 専用グローバルネットワークのサービスコード
			DedicatedSubnetId *string `json:"dedicated_subnet_id,omitempty"`

			// 専用グローバルネットワークに設定した名称
			Nickname *string `json:"nickname,omitempty"`
		} `json:"dedicated_subnet"`

		// ネットワークアドレス
		NetworkAddress *string `json:"network_address,omitempty"`

		// ネットワーク長
		PrefixLength *int `json:"prefix_length,omitempty"`

		// グローバルネットワーク分類
		//
		// * `common_subnet` - 共用グローバルネットワークのIPアドレスを割り当て
		// * `dedicated_subnet` - 専用グローバルネットワーク割り当て
		SubnetType *InterfacePortInternetSubnetType `json:"subnet_type,omitempty"`
	} `json:"internet"`

	// ローカル側の帯域幅(Mbps)
	// ボンディングされている場合は合計値
	LocalBandwidthMbps *string `json:"local_bandwidth_mbps"`

	// 動作モード(初期化後の未設定時は`null`)
	Mode *InterfacePortMode `json:"mode"`

	// インターフェース名称
	Nickname *string `json:"nickname,omitempty"`

	// 所属ポートチャネルID
	PortChannelId *int `json:"port_channel_id,omitempty"`

	// ポートID
	PortId          *int `json:"port_id,omitempty"`
	PrivateNetworks *[]struct {
		// ローカルネットワークに設定した名称
		Nickname *string `json:"nickname,omitempty"`

		// ローカルネットワークID
		PrivateNetworkId *string `json:"private_network_id,omitempty"`
	} `json:"private_networks,omitempty"`
}

// グローバルネットワーク分類
//
// * `common_subnet` - 共用グローバルネットワークのIPアドレスを割り当て
// * `dedicated_subnet` - 専用グローバルネットワーク割り当て
type InterfacePortInternetSubnetType string

// 動作モード(初期化後の未設定時は`null`)
type InterfacePortMode string

// InvalidParameterDetail defines model for invalid_parameter_detail.
type InvalidParameterDetail []struct {
	// エラー内容を示す簡潔な識別子
	Code *string `json:"code,omitempty"`

	// 人間のためのエラーメッセージ
	Message *string `json:"message,omitempty"`
}

// Ipam defines model for ipam.
type Ipam struct {
	// IPアドレスに対しての説明文
	Description *string `json:"description,omitempty"`

	// 専用グローバルネットワークのIPアドレス
	IpAddress *string `json:"ip_address,omitempty"`
	Server    *struct {
		// サーバーの名称
		Nickname *string `json:"nickname,omitempty"`

		// サーバーのサービスコード(用途分類が`server`の場合のみ)
		ServerId *string `json:"server_id,omitempty"`
	} `json:"server"`

	// 割り当て用途分類
	//
	// * `gateway` - ゲートウェイアドレス
	// * `gateway_real` - ゲートウェイ機器実機
	// * `load_balancer` - ロードバランサー
	// * `server` - サーバー
	// * `void` - 用途登録なし
	Type *IpamType `json:"type,omitempty"`

	// 逆引きDNSを設定しているか否か(設定済みの場合 `true`)
	UseRdns *bool `json:"use_rdns,omitempty"`
}

// 割り当て用途分類
//
// * `gateway` - ゲートウェイアドレス
// * `gateway_real` - ゲートウェイ機器実機
// * `load_balancer` - ロードバランサー
// * `server` - サーバー
// * `void` - 用途登録なし
type IpamType string

// PaginateMeta defines model for paginate_meta.
type PaginateMeta struct {
	// 総件数
	Count *int `json:"count,omitempty"`
}

// 英数字と記号の組み合わせ
// 1文字以上のアルファベットと1文字以上の数字が必須
type PasswordInput string

// ネットワークインターフェース ポートチャネル情報
type PortChannel struct {
	// ボンディング方式
	//
	// * `lacp` - LACP
	// * `static` - static link aggregation
	// * `single` - ボンディングなし(単体構成)
	BondingType *PortChannelBondingType `json:"bonding_type,omitempty"`

	// 提供速度分類
	//
	// * `1gbe` - 1GbE
	// * `10gbe` - 10GbE
	LinkSpeedType *PortChannelLinkSpeedType `json:"link_speed_type,omitempty"`

	// 設定変更によるロック状態(ロック中の場合は `true`)
	Locked *bool `json:"locked,omitempty"`

	// ポートチャネルID
	PortChannelId *int `json:"port_channel_id,omitempty"`

	// ポートチャネルを構成するポートIDのリスト
	Ports *[]int `json:"ports,omitempty"`
}

// ボンディング方式
//
// * `lacp` - LACP
// * `static` - static link aggregation
// * `single` - ボンディングなし(単体構成)
type PortChannelBondingType string

// 提供速度分類
//
// * `1gbe` - 1GbE
// * `10gbe` - 10GbE
type PortChannelLinkSpeedType string

// PrivateNetwork defines model for private_network.
type PrivateNetwork struct {
	Hybrid *struct {
		Destinations *[]struct {
			// 接続先別ハイブリッド接続のサービスコード
			BridgeServiceId *string `json:"bridge_service_id,omitempty"`

			// 接続先サービスでの一意なネットワーク識別子
			DestinationSideId *string `json:"destination_side_id,omitempty"`

			// 接続先を分類する名称
			ServiceName *string `json:"service_name,omitempty"`
		} `json:"destinations,omitempty"`

		// ハイブリッド接続のサービスコード
		ServiceId *string `json:"service_id,omitempty"`
	} `json:"hybrid,omitempty"`

	// ローカルネットワークのID
	PrivateNetworkId *string `json:"private_network_id,omitempty"`

	// 接続済みサーバー数
	ServerCount *int `json:"server_count,omitempty"`

	// サービス情報
	Service *ServiceQuiet `json:"service,omitempty"`

	// VLAN ID
	VlanId *int `json:"vlan_id,omitempty"`
	Zone   *struct {
		// 地域名
		Region *string `json:"region,omitempty"`

		// ネットワークゾーンID
		ZoneId *int `json:"zone_id,omitempty"`
	} `json:"zone,omitempty"`
}

// ProblemDetails400 defines model for problem_details_400.
type ProblemDetails400 struct {
	// 人間のためのエラーメッセージ
	Detail *string `json:"detail,omitempty"`

	// 入力値に対するエラーを構造化した情報
	// (titleが`invalid`の場合のみ)
	//
	// * `non_field_errors` - リクエスト全体に起因した(単一項目でない)エラー内容
	// * `*` - 対応した入力項目ごとのエラー内容
	InvalidParameters *ProblemDetails400_InvalidParameters `json:"invalid_parameters"`

	// HTTPステータスコード
	Status *int `json:"status,omitempty"`

	// エラー内容を示す簡潔な識別子
	//
	// * `invalid` - 不正なリクエスト値,リクエスト値が妥当でない
	// * `parse_error` - 不正な形式,リクエスト値を読み取ることができない
	Title *ProblemDetails400Title `json:"title,omitempty"`
	Type  *string                 `json:"type,omitempty"`
}

// 入力値に対するエラーを構造化した情報
// (titleが`invalid`の場合のみ)
//
// * `non_field_errors` - リクエスト全体に起因した(単一項目でない)エラー内容
// * `*` - 対応した入力項目ごとのエラー内容
type ProblemDetails400_InvalidParameters struct {
	NonFieldErrors       *InvalidParameterDetail           `json:"non_field_errors,omitempty"`
	AdditionalProperties map[string]InvalidParameterDetail `json:"-"`
}

// エラー内容を示す簡潔な識別子
//
// * `invalid` - 不正なリクエスト値,リクエスト値が妥当でない
// * `parse_error` - 不正な形式,リクエスト値を読み取ることができない
type ProblemDetails400Title string

// ProblemDetails401 defines model for problem_details_401.
type ProblemDetails401 struct {
	// エラー内容を示す簡潔な識別子
	ErrorCode *ProblemDetails401ErrorCode `json:"error_code,omitempty"`

	// 人間のためのエラーメッセージ
	ErrorMsg *string `json:"error_msg,omitempty"`

	// HTTPステータスコード
	Status *string `json:"status,omitempty"`
}

// エラー内容を示す簡潔な識別子
type ProblemDetails401ErrorCode string

// ProblemDetails404 defines model for problem_details_404.
type ProblemDetails404 struct {
	// 人間のためのエラーメッセージ
	Detail *string `json:"detail,omitempty"`

	// HTTPステータスコード
	Status *int `json:"status,omitempty"`

	// エラー内容を示す簡潔な識別子
	//
	// * `not_found` - 未検出
	Title *ProblemDetails404Title `json:"title,omitempty"`
	Type  *string                 `json:"type,omitempty"`
}

// エラー内容を示す簡潔な識別子
//
// * `not_found` - 未検出
type ProblemDetails404Title string

// ProblemDetails409 defines model for problem_details_409.
type ProblemDetails409 struct {
	// 人間のためのエラーメッセージ
	Detail *string `json:"detail,omitempty"`

	// HTTPステータスコード
	Status *int `json:"status,omitempty"`

	// エラー内容を示す簡潔な識別子
	//
	// * `conflict` - 競合を検出
	Title *ProblemDetails409Title `json:"title,omitempty"`
	Type  *string                 `json:"type,omitempty"`
}

// エラー内容を示す簡潔な識別子
//
// * `conflict` - 競合を検出
type ProblemDetails409Title string

// ProblemDetails429 defines model for problem_details_429.
type ProblemDetails429 struct {
	// 人間のためのエラーメッセージ
	Detail *string `json:"detail,omitempty"`

	// HTTPステータスコード
	Status *int `json:"status,omitempty"`

	// エラー内容を示す簡潔な識別子
	//
	// * `throttled` - リクエスト数制限に達している
	Title *ProblemDetails429Title `json:"title,omitempty"`
	Type  *string                 `json:"type,omitempty"`
}

// エラー内容を示す簡潔な識別子
//
// * `throttled` - リクエスト数制限に達している
type ProblemDetails429Title string

// ProblemDetails503 defines model for problem_details_503.
type ProblemDetails503 struct {
	// 人間のためのエラーメッセージ
	Detail *string `json:"detail,omitempty"`

	// HTTPステータスコード
	Status *int `json:"status,omitempty"`

	// エラー内容を示す簡潔な識別子
	//
	// * `temporary_unavailable` - 一時的に利用不可
	Title *ProblemDetails503Title `json:"title,omitempty"`
	Type  *string                 `json:"type,omitempty"`
}

// エラー内容を示す簡潔な識別子
//
// * `temporary_unavailable` - 一時的に利用不可
type ProblemDetails503Title string

// RaidStatus defines model for raid_status.
type RaidStatus struct {
	// 作成済みRAID論理ボリュームのリスト
	LogicalVolumes *[]struct {
		PhysicalDeviceIds *[]string `json:"physical_device_ids,omitempty"`

		// RAIDレベル
		RaidLevel *string `json:"raid_level,omitempty"`

		// このRAID論理ボリュームの状態
		Status *RaidStatusLogicalVolumesStatus `json:"status,omitempty"`

		// このサーバーのRAID論理ボリュームの一意な識別子
		VolumeId *string `json:"volume_id,omitempty"`
	} `json:"logical_volumes,omitempty"`

	// RAID状態を取得した時刻
	Monitored *time.Time `json:"monitored,omitempty"`

	// 総合的なRAID論理ボリューム状態
	//
	// * `ok` - 全てのRAID論理ボリュームと物理デバイスが正常
	// * `rebuilding` - 再構築中のRAID論理ボリュームが1つ以上ある(物理デバイスは全て正常、冗長性は低下している)
	// * `degraded` - 異常検出した物理デバイスが1つ以上ある(論理ボリュームは利用可能、冗長性は低下している)
	// * `failed` - 故障したRAID論理ボリュームが1つ以上ある(2つ以上の物理デバイスに異常があるRAID5など)
	// * `null` - RAID論理ボリュームがない
	//
	// `failed > degraded > rebuilding > ok` の順でより深刻なものが選択される
	OverallStatus *RaidStatusOverallStatus `json:"overall_status"`

	// 認識済み物理ストレージデバイスのリスト
	PhysicalDevices *[]struct {
		// サーバーの物理ストレージデバイスの一意な識別子
		DeviceId *string `json:"device_id,omitempty"`

		// 接続スロット番号
		Slot *int `json:"slot,omitempty"`

		// この物理ストレージデバイスの状態
		//
		// * `ok` - 正常
		// * `failed` - 異常を検知
		Status *RaidStatusPhysicalDevicesStatus `json:"status,omitempty"`
	} `json:"physical_devices,omitempty"`
}

// このRAID論理ボリュームの状態
type RaidStatusLogicalVolumesStatus string

// 総合的なRAID論理ボリューム状態
//
// * `ok` - 全てのRAID論理ボリュームと物理デバイスが正常
// * `rebuilding` - 再構築中のRAID論理ボリュームが1つ以上ある(物理デバイスは全て正常、冗長性は低下している)
// * `degraded` - 異常検出した物理デバイスが1つ以上ある(論理ボリュームは利用可能、冗長性は低下している)
// * `failed` - 故障したRAID論理ボリュームが1つ以上ある(2つ以上の物理デバイスに異常があるRAID5など)
// * `null` - RAID論理ボリュームがない
//
// `failed > degraded > rebuilding > ok` の順でより深刻なものが選択される
type RaidStatusOverallStatus string

// この物理ストレージデバイスの状態
//
// * `ok` - 正常
// * `failed` - 異常を検知
type RaidStatusPhysicalDevicesStatus string

// Server defines model for server.
type Server struct {
	// キャッシュされた電源状態(未キャッシュならば`null`)
	CachedPowerStatus *struct {
		// 電源状態
		Status *ServerCachedPowerStatusStatus `json:"status,omitempty"`

		// 電源状態キャッシュの保存時刻
		Stored *time.Time `json:"stored,omitempty"`
	} `json:"cached_power_status"`

	// グローバルIPアドレス割り当て情報(未設定時は`null`)
	Ipv4 *struct {
		// ゲートウェイアドレス
		GatewayAddress *string `json:"gateway_address,omitempty"`

		// IPアドレス
		IpAddress *string `json:"ip_address,omitempty"`

		// DNSサーバーリスト
		NameServers *[]string `json:"name_servers,omitempty"`

		// ネットワークアドレス
		NetworkAddress *string `json:"network_address,omitempty"`

		// ネットワーク長
		PrefixLength *int `json:"prefix_length,omitempty"`

		// IPアドレスの種類
		//
		// * `common_ip_address` - 共用グローバルネットワークのIPアドレス
		// * `dedicated_ip_address` - 専用グローバルネットワークのIPアドレス(割り当て設定が必要)
		Type *ServerIpv4Type `json:"type,omitempty"`
	} `json:"ipv4"`

	// 設定変更処理によるロック状態
	// `null`以外がセットされている場合は
	// OS再インストール,ネットワークIF設定(VLAN,通信無効など),電源操作を受け付けない
	//
	// * `os_install` - OSインストール処理中
	// * `configure_raid` - RAID設定処理中
	// * `administrative_lock` - 機器交換,増設などの作業を行っている
	// * `null` - 設定変更を行っていない(処理を完了している)
	LockStatus   *ServerLockStatus `json:"lock_status"`
	PortChannels *[]PortChannel    `json:"port_channels,omitempty"`
	Ports        *[]InterfacePort  `json:"ports,omitempty"`

	// サーバーのサービスコード
	ServerId *string `json:"server_id,omitempty"`

	// サービス情報
	Service *ServiceQuiet `json:"service,omitempty"`
	Spec    *struct {
		// CPUクロック数(GHz)
		CpuClockSpeed *string `json:"cpu_clock_speed,omitempty"`

		// 総CPUコア数
		CpuCoreCount *int `json:"cpu_core_count,omitempty"`

		// 物理CPU数
		CpuCount *int `json:"cpu_count,omitempty"`

		// CPU製品モデル名
		CpuModelName *string `json:"cpu_model_name,omitempty"`

		// 総メモリ数(GB)
		MemorySize *int `json:"memory_size,omitempty"`

		// 10GbEネットワークインターフェース ポートチャネル数
		PortChannel10gbeCount *int `json:"port_channel_10gbe_count,omitempty"`

		// 1GbEネットワークインターフェース ポートチャネル数
		PortChannel1gbeCount *int `json:"port_channel_1gbe_count,omitempty"`

		// ストレージ構成情報
		// 同一構成(接続方式,記録方式,容量)ごとの配列
		Storages *[]struct {
			// ストレージ接続方式
			//
			// * `sata` - SATA
			// * `sas` - SAS
			// * `nvme` - NVMe(PCIe)
			BusType *ServerSpecStoragesBusType `json:"bus_type,omitempty"`

			// ストレージ構成物理デバイス数
			DeviceCount *string `json:"device_count,omitempty"`

			// ストレージ記録方式
			//
			// * `hdd` - 磁気HDD
			// * `ssd` - SSD
			// * `flash_memory` - Flash Memory(不揮発性メモリ)
			MediaType *ServerSpecStoragesMediaType `json:"media_type,omitempty"`

			// ストレージ1つあたりの容量(GB)
			Size *int `json:"size,omitempty"`
		} `json:"storages,omitempty"`

		// ストレージ構成物理デバイス数の合計
		TotalStorageDeviceCount *int `json:"total_storage_device_count,omitempty"`
	} `json:"spec,omitempty"`
	Zone *struct {
		// 地域名
		Region *string `json:"region,omitempty"`

		// ネットワークゾーンID
		ZoneId *int `json:"zone_id,omitempty"`
	} `json:"zone,omitempty"`
}

// 電源状態
type ServerCachedPowerStatusStatus string

// IPアドレスの種類
//
// * `common_ip_address` - 共用グローバルネットワークのIPアドレス
// * `dedicated_ip_address` - 専用グローバルネットワークのIPアドレス(割り当て設定が必要)
type ServerIpv4Type string

// 設定変更処理によるロック状態
// `null`以外がセットされている場合は
// OS再インストール,ネットワークIF設定(VLAN,通信無効など),電源操作を受け付けない
//
// * `os_install` - OSインストール処理中
// * `configure_raid` - RAID設定処理中
// * `administrative_lock` - 機器交換,増設などの作業を行っている
// * `null` - 設定変更を行っていない(処理を完了している)
type ServerLockStatus string

// ストレージ接続方式
//
// * `sata` - SATA
// * `sas` - SAS
// * `nvme` - NVMe(PCIe)
type ServerSpecStoragesBusType string

// ストレージ記録方式
//
// * `hdd` - 磁気HDD
// * `ssd` - SSD
// * `flash_memory` - Flash Memory(不揮発性メモリ)
type ServerSpecStoragesMediaType string

// ServerPowerStatus defines model for server_power_status.
type ServerPowerStatus struct {
	// サーバーの電源状態
	//
	// * `on` - 起動
	// * `off` - 停止
	Status *ServerPowerStatusStatus `json:"status,omitempty"`
}

// サーバーの電源状態
//
// * `on` - 起動
// * `off` - 停止
type ServerPowerStatusStatus string

// Service defines model for service.
type Service struct {
	// 利用開始日時
	Activated *time.Time `json:"activated,omitempty"`

	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname    *string `json:"nickname,omitempty"`
	OptionPlans *[]struct {
		// プラン名称
		Name *string `json:"name,omitempty"`

		// オプション申込区分
		//
		// * `upgrade_memory` - 拡張メモリ
		// * `upgrade_storage` - ストレージ変更
		// * `additional_storage1` - 追加ストレージ1
		// * `additional_storage2` - 追加ストレージ2
		// * `additional_storage3` - 追加ストレージ3
		// * `additional_nvme_storage1` - 追加NVMeストレージ1
		// * `additional_nvme_storage2` - 追加NVMeストレージ2
		// * `os` - 有償OS
		// * `global_bandwidth` - インターネット帯域オプション
		// * `local_bandwidth` - ローカルネットワーク帯域オプション
		OptionClass *ServiceOptionPlansOptionClass `json:"option_class,omitempty"`

		// プランID
		PlanId *string `json:"plan_id,omitempty"`
	} `json:"option_plans,omitempty"`

	// プラン情報(ローカルネットワークの場合は`null`)
	Plan *struct {
		Name   *string `json:"name,omitempty"`
		PlanId *string `json:"plan_id,omitempty"`
	} `json:"plan"`

	// サービスの種類
	//
	// * `server` - サーバー
	// * `dedicated_subnet` - 専用グローバルネットワーク
	// * `private_network` - ローカルネットワーク
	// * `firewall` - ファイアウォール
	// * `load_balancer` - ロードバランサー
	ProductCategory *ServiceProductCategory `json:"product_category,omitempty"`
	ServiceId       *string                 `json:"service_id,omitempty"`
	Tags            *[]Tag                  `json:"tags,omitempty"`
}

// オプション申込区分
//
// * `upgrade_memory` - 拡張メモリ
// * `upgrade_storage` - ストレージ変更
// * `additional_storage1` - 追加ストレージ1
// * `additional_storage2` - 追加ストレージ2
// * `additional_storage3` - 追加ストレージ3
// * `additional_nvme_storage1` - 追加NVMeストレージ1
// * `additional_nvme_storage2` - 追加NVMeストレージ2
// * `os` - 有償OS
// * `global_bandwidth` - インターネット帯域オプション
// * `local_bandwidth` - ローカルネットワーク帯域オプション
type ServiceOptionPlansOptionClass string

// サービスの種類
//
// * `server` - サーバー
// * `dedicated_subnet` - 専用グローバルネットワーク
// * `private_network` - ローカルネットワーク
// * `firewall` - ファイアウォール
// * `load_balancer` - ロードバランサー
type ServiceProductCategory string

// サービス情報
type ServiceQuiet struct {
	// 利用開始日時
	Activated *time.Time `json:"activated,omitempty"`

	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname *string `json:"nickname,omitempty"`

	// サービスコード
	ServiceId *string `json:"service_id,omitempty"`
	Tags      *[]Tag  `json:"tags,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	// タグの色
	Color *string `json:"color"`

	// タグの名称
	Label *string `json:"label,omitempty"`

	// タグID
	TagId *int `json:"tag_id,omitempty"`
}

// DedicatedSubnetId defines model for dedicated_subnet_id.
type DedicatedSubnetId string

// FreeWordFilter defines model for free_word_filter.
type FreeWordFilter []string

// HeaderRequestedWith defines model for header_requested_with.
type HeaderRequestedWith string

// Limit defines model for limit.
type Limit int

// Offset defines model for offset.
type Offset int

// PortChannelId defines model for port_channel_id.
type PortChannelId int

// PortId defines model for port_id.
type PortId int

// PrivateNetworkId defines model for private_network_id.
type PrivateNetworkId string

// ServerId defines model for server_id.
type ServerId string

// ServiceId defines model for service_id.
type ServiceId string

// TagFilter defines model for tag_filter.
type TagFilter []string

// Generic400 defines model for generic_400.
type Generic400 ProblemDetails400

// Generic401 defines model for generic_401.
type Generic401 ProblemDetails401

// Generic429 defines model for generic_429.
type Generic429 ProblemDetails429

// GetDedicatedSubnetsParams defines parameters for GetDedicatedSubnets.
type GetDedicatedSubnetsParams struct {
	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *GetDedicatedSubnetsParamsOrdering `json:"ordering,omitempty"`
}

// GetDedicatedSubnetsParamsOrdering defines parameters for GetDedicatedSubnets.
type GetDedicatedSubnetsParamsOrdering string

// GetDedicatedSubnetsDedicatedSubnetIdParams defines parameters for GetDedicatedSubnetsDedicatedSubnetId.
type GetDedicatedSubnetsDedicatedSubnetIdParams struct {
	// IPv6有効状態の最新状態を取得する
	Refresh *bool `json:"refresh,omitempty"`
}

// GetPrivateNetworksParams defines parameters for GetPrivateNetworks.
type GetPrivateNetworksParams struct {
	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *GetPrivateNetworksParamsOrdering `json:"ordering,omitempty"`
}

// GetPrivateNetworksParamsOrdering defines parameters for GetPrivateNetworks.
type GetPrivateNetworksParamsOrdering string

// GetServersParams defines parameters for GetServers.
type GetServersParams struct {
	// キャッシュされた電源状態で絞りこむ
	PowerStatus *GetServersParamsPowerStatus `json:"power_status,omitempty"`

	// インターネット接続状態の絞り込み
	//
	// * `common` - 共用グローバルネットワークを利用
	// * `void` - インターネット接続なし
	// * `{dedicated_subnet_id}` - 指定した専用グローバルネットワークを利用
	Internet *string `json:"internet,omitempty"`

	// ローカルネットワークの接続状態の絞り込み
	// このパラメーターが複数ある場合は**全てのネットワークに接続済み(AND)**が対象
	//
	// * `void` - ローカル接続なし
	// * `{private_network_id}` - 指定したローカルネットワークを利用
	PrivateNetwork *[]string `json:"private_network,omitempty"`

	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順の指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	// * `power_status_stored` - 電源状態更新日時順
	Ordering *GetServersParamsOrdering `json:"ordering,omitempty"`
}

// GetServersParamsPowerStatus defines parameters for GetServers.
type GetServersParamsPowerStatus string

// GetServersParamsOrdering defines parameters for GetServers.
type GetServersParamsOrdering string

// PostServersServerIdOsInstallJSONBody defines parameters for PostServersServerIdOsInstall.
type PostServersServerIdOsInstallJSONBody struct {
	// リモートコンソールを利用し手動パーティション指定を行う
	// (OSが対応している場合のみ)
	ManualPartition *bool `json:"manual_partition,omitempty"`

	// インストールするOSイメージ名
	OsImageId string `json:"os_image_id"`

	// 英数字と記号の組み合わせ
	// 1文字以上のアルファベットと1文字以上の数字が必須
	Password *PasswordInput `json:"password,omitempty"`
}

// PostServersServerIdOsInstallParams defines parameters for PostServersServerIdOsInstall.
type PostServersServerIdOsInstallParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PostServersServerIdOsInstallParamsXRequestedWith `json:"X-Requested-With"`
}

// PostServersServerIdOsInstallParamsXRequestedWith defines parameters for PostServersServerIdOsInstall.
type PostServersServerIdOsInstallParamsXRequestedWith string

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBody defines parameters for PostServersServerIdPortChannelsPortChannelIdConfigureBonding.
type PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBody struct {
	// ボンディング方式指定
	//
	// * `lacp` - LACP
	// * `static` - static link aggregation
	// * `single` - ボンディングなし(単体構成)
	BondingType PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBodyBondingType `json:"bonding_type"`

	// 作成するポート名称の指定
	//
	// * `null`の場合は自動設定
	// * ボンディング構成する場合は1要素の配列
	// * ボンディングなしの場合は2要素の配列
	PortNicknames *[]string `json:"port_nicknames"`
}

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams defines parameters for PostServersServerIdPortChannelsPortChannelIdConfigureBonding.
type PostServersServerIdPortChannelsPortChannelIdConfigureBondingParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PostServersServerIdPortChannelsPortChannelIdConfigureBondingParamsXRequestedWith `json:"X-Requested-With"`
}

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingParamsXRequestedWith defines parameters for PostServersServerIdPortChannelsPortChannelIdConfigureBonding.
type PostServersServerIdPortChannelsPortChannelIdConfigureBondingParamsXRequestedWith string

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBodyBondingType defines parameters for PostServersServerIdPortChannelsPortChannelIdConfigureBonding.
type PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBodyBondingType string

// PatchServersServerIdPortsPortIdJSONBody defines parameters for PatchServersServerIdPortsPortId.
type PatchServersServerIdPortsPortIdJSONBody struct {
	// ポート名称
	Nickname string `json:"nickname"`
}

// PatchServersServerIdPortsPortIdParams defines parameters for PatchServersServerIdPortsPortId.
type PatchServersServerIdPortsPortIdParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PatchServersServerIdPortsPortIdParamsXRequestedWith `json:"X-Requested-With"`
}

// PatchServersServerIdPortsPortIdParamsXRequestedWith defines parameters for PatchServersServerIdPortsPortId.
type PatchServersServerIdPortsPortIdParamsXRequestedWith string

// PostServersServerIdPortsPortIdAssignNetworkJSONBody defines parameters for PostServersServerIdPortsPortIdAssignNetwork.
type PostServersServerIdPortsPortIdAssignNetworkJSONBody struct {
	// 専用グローバルネットワークのサービスコード指定
	// `global_network_type`が`dedicated_subnet`の場合に必須
	DedicatedSubnetId *string `json:"dedicated_subnet_id"`

	// * `null` - インターネット接続なし
	// * `common_subnet` - 共用グローバルネットワーク利用
	// * `dedicated_subnet` - 専用グローバルネットワーク利用
	InternetType *PostServersServerIdPortsPortIdAssignNetworkJSONBodyInternetType `json:"internet_type"`

	// ポートモード
	//
	// * `access` - アクセスポート
	// * `trunk` - トランクポート
	Mode PostServersServerIdPortsPortIdAssignNetworkJSONBodyMode `json:"mode"`

	// 接続先ローカルネットワークの配列
	PrivateNetworkIds *[]string `json:"private_network_ids"`
}

// PostServersServerIdPortsPortIdAssignNetworkParams defines parameters for PostServersServerIdPortsPortIdAssignNetwork.
type PostServersServerIdPortsPortIdAssignNetworkParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PostServersServerIdPortsPortIdAssignNetworkParamsXRequestedWith `json:"X-Requested-With"`
}

// PostServersServerIdPortsPortIdAssignNetworkParamsXRequestedWith defines parameters for PostServersServerIdPortsPortIdAssignNetwork.
type PostServersServerIdPortsPortIdAssignNetworkParamsXRequestedWith string

// PostServersServerIdPortsPortIdAssignNetworkJSONBodyInternetType defines parameters for PostServersServerIdPortsPortIdAssignNetwork.
type PostServersServerIdPortsPortIdAssignNetworkJSONBodyInternetType string

// PostServersServerIdPortsPortIdAssignNetworkJSONBodyMode defines parameters for PostServersServerIdPortsPortIdAssignNetwork.
type PostServersServerIdPortsPortIdAssignNetworkJSONBodyMode string

// PostServersServerIdPortsPortIdEnableJSONBody defines parameters for PostServersServerIdPortsPortIdEnable.
type PostServersServerIdPortsPortIdEnableJSONBody struct {
	// 通信を有効にする場合に `true`
	Enable bool `json:"enable"`
}

// PostServersServerIdPortsPortIdEnableParams defines parameters for PostServersServerIdPortsPortIdEnable.
type PostServersServerIdPortsPortIdEnableParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PostServersServerIdPortsPortIdEnableParamsXRequestedWith `json:"X-Requested-With"`
}

// PostServersServerIdPortsPortIdEnableParamsXRequestedWith defines parameters for PostServersServerIdPortsPortIdEnable.
type PostServersServerIdPortsPortIdEnableParamsXRequestedWith string

// GetServersServerIdPortsPortIdTrafficGraphParams defines parameters for GetServersServerIdPortsPortIdTrafficGraph.
type GetServersServerIdPortsPortIdTrafficGraphParams struct {
	// 取得範囲始点(過去31日前まで,未指定時は7日前)
	Since *time.Time `json:"since,omitempty"`

	// 取得範囲終点(未指定時は現在時刻)
	Until *time.Time `json:"until,omitempty"`

	// データポイント間隔(秒)
	Step *GetServersServerIdPortsPortIdTrafficGraphParamsStep `json:"step,omitempty"`
}

// GetServersServerIdPortsPortIdTrafficGraphParamsStep defines parameters for GetServersServerIdPortsPortIdTrafficGraph.
type GetServersServerIdPortsPortIdTrafficGraphParamsStep int

// PostServersServerIdPowerControlJSONBody defines parameters for PostServersServerIdPowerControl.
type PostServersServerIdPowerControlJSONBody struct {
	// 操作内容
	//
	// * `on` - 電源ON
	// * `soft` - ACPIシャットダウン(OSでの電源シャットダウン)
	// * `reset` - ハードウェア電源リセット(電源OFF+電源ON)
	// * `off` - ハードウェア電源OFF
	Operation PostServersServerIdPowerControlJSONBodyOperation `json:"operation"`
}

// PostServersServerIdPowerControlParams defines parameters for PostServersServerIdPowerControl.
type PostServersServerIdPowerControlParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PostServersServerIdPowerControlParamsXRequestedWith `json:"X-Requested-With"`
}

// PostServersServerIdPowerControlParamsXRequestedWith defines parameters for PostServersServerIdPowerControl.
type PostServersServerIdPowerControlParamsXRequestedWith string

// PostServersServerIdPowerControlJSONBodyOperation defines parameters for PostServersServerIdPowerControl.
type PostServersServerIdPowerControlJSONBodyOperation string

// GetServersServerIdRaidStatusParams defines parameters for GetServersServerIdRaidStatus.
type GetServersServerIdRaidStatusParams struct {
	// 実機の最新状態を取得
	Refresh *bool `json:"refresh,omitempty"`
}

// GetServicesParams defines parameters for GetServices.
type GetServicesParams struct {
	// サービスの種類で絞りこむ
	ProductCategory *GetServicesParamsProductCategory `json:"product_category,omitempty"`

	// タグで絞り込む  \
	// このクエリーパラメーターを複数指定した場合は **すべてのタグを設定済み(AND)** のものにマッチ
	Tag *TagFilter `json:"tag,omitempty"`

	// フリーワード検索
	// 下記項目の **いずれか** にマッチしたものを抽出する
	//
	// * 名前(部分一致)
	// * 説明(部分一致)
	// * タグ(部分一致)
	//
	// このクエリーパラメーターを複数指定した場合は **複数の語句すべてを含む(AND)** ものにマッチ
	FreeWord *FreeWordFilter `json:"free_word,omitempty"`

	// 取得数を指定する
	Limit *Limit `json:"limit,omitempty"`

	// 取得開始位置を指定する
	Offset *Offset `json:"offset,omitempty"`

	// 並び順指定,
	// __-__ から始まる場合は降順指定
	//
	// * `activated` - 利用開始日順
	// * `nickname` - 名称順
	Ordering *GetServicesParamsOrdering `json:"ordering,omitempty"`
}

// GetServicesParamsProductCategory defines parameters for GetServices.
type GetServicesParamsProductCategory string

// GetServicesParamsOrdering defines parameters for GetServices.
type GetServicesParamsOrdering string

// PatchServicesServiceIdJSONBody defines parameters for PatchServicesServiceId.
type PatchServicesServiceIdJSONBody struct {
	// メモ：サーバーやネットワークなどの説明
	Description *string `json:"description"`

	// 名称：サーバーやネットワークなどの表示名
	Nickname *string `json:"nickname,omitempty"`
}

// PatchServicesServiceIdParams defines parameters for PatchServicesServiceId.
type PatchServicesServiceIdParams struct {
	// CSRF防止用ヘッダー
	XRequestedWith PatchServicesServiceIdParamsXRequestedWith `json:"X-Requested-With"`
}

// PatchServicesServiceIdParamsXRequestedWith defines parameters for PatchServicesServiceId.
type PatchServicesServiceIdParamsXRequestedWith string

// PostServersServerIdOsInstallJSONRequestBody defines body for PostServersServerIdOsInstall for application/json ContentType.
type PostServersServerIdOsInstallJSONRequestBody PostServersServerIdOsInstallJSONBody

// PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody defines body for PostServersServerIdPortChannelsPortChannelIdConfigureBonding for application/json ContentType.
type PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONRequestBody PostServersServerIdPortChannelsPortChannelIdConfigureBondingJSONBody

// PatchServersServerIdPortsPortIdJSONRequestBody defines body for PatchServersServerIdPortsPortId for application/json ContentType.
type PatchServersServerIdPortsPortIdJSONRequestBody PatchServersServerIdPortsPortIdJSONBody

// PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody defines body for PostServersServerIdPortsPortIdAssignNetwork for application/json ContentType.
type PostServersServerIdPortsPortIdAssignNetworkJSONRequestBody PostServersServerIdPortsPortIdAssignNetworkJSONBody

// PostServersServerIdPortsPortIdEnableJSONRequestBody defines body for PostServersServerIdPortsPortIdEnable for application/json ContentType.
type PostServersServerIdPortsPortIdEnableJSONRequestBody PostServersServerIdPortsPortIdEnableJSONBody

// PostServersServerIdPowerControlJSONRequestBody defines body for PostServersServerIdPowerControl for application/json ContentType.
type PostServersServerIdPowerControlJSONRequestBody PostServersServerIdPowerControlJSONBody

// PatchServicesServiceIdJSONRequestBody defines body for PatchServicesServiceId for application/json ContentType.
type PatchServicesServiceIdJSONRequestBody PatchServicesServiceIdJSONBody

// Getter for additional properties for ProblemDetails400_InvalidParameters. Returns the specified
// element and whether it was found
func (a ProblemDetails400_InvalidParameters) Get(fieldName string) (value InvalidParameterDetail, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProblemDetails400_InvalidParameters
func (a *ProblemDetails400_InvalidParameters) Set(fieldName string, value InvalidParameterDetail) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]InvalidParameterDetail)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProblemDetails400_InvalidParameters to handle AdditionalProperties
func (a *ProblemDetails400_InvalidParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["non_field_errors"]; found {
		err = json.Unmarshal(raw, &a.NonFieldErrors)
		if err != nil {
			return fmt.Errorf("error reading 'non_field_errors': %w", err)
		}
		delete(object, "non_field_errors")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]InvalidParameterDetail)
		for fieldName, fieldBuf := range object {
			var fieldVal InvalidParameterDetail
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProblemDetails400_InvalidParameters to handle AdditionalProperties
func (a ProblemDetails400_InvalidParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.NonFieldErrors != nil {
		object["non_field_errors"], err = json.Marshal(a.NonFieldErrors)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'non_field_errors': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
